#This Assembly Code has been auto-generated by The Mohamad and Tom Pish Compiler.

# Constant Declaration Section
	.data
		 newline: 	 .ascii 	 "\n" 
			 .space 	 6
	
	p0:	.ascii	"\n"
			.space	11
	p1:	.ascii	""
			.space	5
	p2:	.ascii	"x > y"
			.space	20
	p4:	.ascii	"helllloo "
			.space	32
	print1:	.ascii	", answer is: "
			.space	44
	print2:	.ascii	" MUL "
			.space	20
	print3:	.ascii	" ADD "
			.space	20
	a:	.word	5
	bbb:	.word	6
	c:	.word	10
	d:	.word	20
	aa:	.float	5.5
	bb:	.float	7.7
	cc:	.float	8.8

# Simple Declaration Section
	.data
	X: 	.word	0
	Y: 	.word	0
	Z: 	.word	0
	W: 	.word	0
	XX: 	.float	0
	YY: 	.float	0
	ZZ: 	.float	0
	I: 	.word	0
	V: 	.word	0
	sum: 	.word	0
	jj: 	.word	0
	ee: 	.word	0
	II: 	.float	0
	TOM_ARRAY: 	.space	44
	MOH_ARRAY: 	.space	44
	MOH_STUDENT: 	.space	56

# Set jump to main to override
.text
.globl MAIN
j MAIN
WRITEINT:
	 sw 	 $ra, ($sp) 	 # push the return addr
	 addi 	 $sp, $sp, -4
	 sw 	 $fp, ($sp) 	 # push the old frame pointer
	 addi 	 $sp, $sp, -4
	 move 	 $fp, $sp 	 # establish new frame pointer.

	 lw 	 $a0, 12($fp)	 # getting the param (address)
	 lw 	 $a0, ($a0)
	 li 	 $v0, 1 	 # load INTEGER print system call code(1) into register $v0
	 syscall

	 la 	 $a0, newline
	 sw 	 $a0 , ($sp) 	 # push the address on
	 addi 	 $sp, $sp, -4
	 jal 	 WRITECHAR
	 addi 	 $sp, $sp, 4

	 move 	 $sp, $fp 	 # all local var's gone
	 addi 	 $sp, $sp, 4
	 lw 	 $fp, ($sp)		 # restore old $fp
	 addi 	 $sp, $sp, 4
	 lw 	 $ra, ($sp) 	 # restore return address
	 jr 	 $ra		 # return


WRITEREAL:
	 sw 	 $ra, ($sp) 	 # push the return addr
	 addi 	 $sp, $sp, -4
	 sw 	 $fp, ($sp) 	 # push the old frame pointer
	 addi 	 $sp, $sp, -4
	 move 	 $fp, $sp 	 # establish new frame pointer.

	 lw 	 $a0, 12($fp) 	 # getting the param (address)
	 l.s 	 $f12, ($a0) 	 #loading adress into float reg for printing
	 li 	 $v0, 2 	 # load REAL print system call code(2) into register $v0
	 syscall

	 la 	 $a0, newline
	 sw 	 $a0 , ($sp) 	 # push the address on
	 addi 	 $sp, $sp, -4
	 jal 	 WRITECHAR
	 addi 	 $sp, $sp, 4
	 move 	 $sp, $fp 	 # all local var's gone
	 addi 	 $sp, $sp, 4
	 lw 	 $fp, ($sp)		 # restore old $fp
	 addi 	 $sp, $sp, 4
	 lw 	 $ra, ($sp) 	 # restore return address
	 jr 	 $ra		 # return


WRITECHAR:
	 sw 	 $ra, ($sp) 	 # push the return addr
	 addi 	 $sp, $sp, -4
	 sw 	 $fp, ($sp) 	 # push the old frame pointer
	 addi 	 $sp, $sp, -4
	 move 	 $fp, $sp 	 # establish new frame pointer.

	 lw 	 $a0, 12($fp) 	 # load address of string to be printed into $a0
	 li 	 $v0, 4 	 # load STRING print system call code(2) into register $v0
	 syscall

	 move 	 $sp, $fp 	 # all local var's gone
	 addi 	 $sp, $sp, 4
	 lw 	 $fp, ($sp)		 # restore old $fp
	 addi 	 $sp, $sp, 4
	 lw 	 $ra, ($sp) 	 # restore return address
	 jr 	 $ra		 # return



COUNTDOWN: 
	 sw 	 $ra, ($sp) 	 # push the return addr
	 addi 	 $sp, $sp, -4
	 sw 	 $fp, ($sp) 	 # push the old frame pointer
	 addi 	 $sp, $sp, -4
	 move 	 $fp, $sp 	 # establish new frame pointer.

# Allocate space for Variables
	 addi, $sp, $sp, -4 	 # Allocate space for Symbol[L] Type[IntType] depth[1] offset[4] size[4] at line 43
	 addi, $sp, $sp, -4 	 # Allocate space for Symbol[G] Type[IntType] depth[1] offset[8] size[4] at line 49

# Allocate space for Temps
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T57(12))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T58(16))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T59(20))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T60(24))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T61(28))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T62(32))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T63(36))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T64(40))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T65(44))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T66(48))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T67(52))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T68(56))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T69(60))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T70(64))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T71(68))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T72(72))

# Copying Params into local Memory
	 lw 	 $a0, 12($fp) 	 #INT
	 lw 	 $t0, ($a0) 
	 sw 	 $t0, -4($fp) 	 #Copying INTEGER value
# END PARAM COPY
# BEGIN
# FUNCTION CALL TO (WRITEINT)
	 la 	 $t0, -4($fp)
	 sw 	 $t0, -12($fp)
# LOAD PARAM (T57(12))
	 la 	 $a0, -12($fp) 	 #loading address of (T57(12))
	 lw 	 $a0, ($a0) 	 #defreerce pointer
	 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
	 addi $sp, $sp, -4 	 #decrement stack

	 jal WRITEINT 	 #Jump to Function

	 #STORING RETURN VAL
	 #NO RETURN VALUE

	 #REMOVING PARAMS
	 addi $sp, $sp, -4 	 #inc stack

	 la 	 $t0, -8($fp)
	 sw 	 $t0, -20($fp)
	 li 	 $t0, 1
	 sw 	 $t0, -24($fp)
	#BEGIN ASSIGN STMT
	 lw 	 $t0,-20($fp)
	#INTEGER ASSIGNMENT
	 lw 	 $t1,-24($fp)
	 sw 	 $t1,($t0) 	 # Storing Result
	#END ASSIGN STMT
	 la 	 $t0, -8($fp)
	 sw 	 $t0, -28($fp)
	#BEGIN BOP (-)
	 la 	 $t0, -4($fp)
	 sw 	 $t0, -32($fp)
	 la 	 $t0, -8($fp)
	 sw 	 $t0, -36($fp)

		#LEFT HAND SIDE
	 lw 	 $a0, -32($fp)	 #RETRIVING LEFT ADDRESS 
	 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 

		#RIGHT HAND SIDE
	 lw 	 $a0, -36($fp)	 #RETRIVING RIGHT ADDRESS 
	 lw 	 $t1, ($a0)  	 #GETTING VALUE OF RIGHT ADDRESS 
	 sub 	 $t2, $t0, $t1
	 sw 	 $t2, -40($fp)
	#END BOP(-)
	#BEGIN ASSIGN STMT
	 lw 	 $t0,-28($fp)
	#INTEGER ASSIGNMENT
	 lw 	 $t1,-40($fp)
	 sw 	 $t1,($t0) 	 # Storing Result
	#END ASSIGN STMT
	#START OF IF STMT
		#BEGIN BOP (<=)
		 la 	 $t0, -8($fp)
		 sw 	 $t0, -44($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -48($fp)
	
			#LEFT HAND SIDE
		 lw 	 $a0, -44($fp)	 #RETRIVING LEFT ADDRESS 
		 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
	
			#RIGHT HAND SIDE
		 lw 	 $t1,  -48($fp)	 #RETRIVING LEFT VALUE
		 sle 	 $t2, $t0, $t1
		 sw 	 $t2, -52($fp)
		#END BOP(<=)
		 lw 	 $t1,-52($fp)
		 beqz 	 $t1 ,L0
			#THEN STMT
		 li 	 $t0, 0
		 sw 	 $t0, -60($fp)
		#RETURN EXPRESSION
		#INTEGER ASSIGNMENT
		 la 	 $t0, -60($fp)
		 lw 	 $v1, ($t0)
		#END ASSIGN STMT
	j L1
	L0: #ELSE IF STMT
	# FUNCTION CALL TO (COUNTDOWN)
		 la 	 $t0, -8($fp)
		 sw 	 $t0, -68($fp)
	# LOAD PARAM (T71(68))
		 la 	 $a0, -68($fp) 	 #loading address of (T71(68))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal COUNTDOWN 	 #Jump to Function
	
		 #STORING RETURN VAL
		 sw 	 $v1, -72($fp)
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		#RETURN EXPRESSION
		#INTEGER ASSIGNMENT
		 la 	 $t0, -72($fp)
		 lw 	 $v1, ($t0)
		#END ASSIGN STMT
	L1: #END IF STMT
# END

	 move 	 $sp, $fp 	 # all local var's gone
	 addi 	 $sp, $sp, 4 	 # and pop that word
	 lw 	 $fp, ($sp) 	 # restore old $fp
	 addi 	 $sp, $sp, 4 	 # and pop that word
	 lw 	 $ra, ($sp) 	 # restore return address
	 jr 	 $ra 	 # return

COUNTUP: 
	 sw 	 $ra, ($sp) 	 # push the return addr
	 addi 	 $sp, $sp, -4
	 sw 	 $fp, ($sp) 	 # push the old frame pointer
	 addi 	 $sp, $sp, -4
	 move 	 $fp, $sp 	 # establish new frame pointer.

# Allocate space for Variables
	 addi, $sp, $sp, -4 	 # Allocate space for Symbol[L] Type[IntType] depth[1] offset[4] size[4] at line 44
	 addi, $sp, $sp, -4 	 # Allocate space for Symbol[U] Type[IntType] depth[1] offset[8] size[4] at line 65

# Allocate space for Temps
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T74(12))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T75(16))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T76(20))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T77(24))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T78(28))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T79(32))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T80(36))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T81(40))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T82(44))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T83(48))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T84(52))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T85(56))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T86(60))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T87(64))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T88(68))
	 addi 	 $sp,$sp,-4 	 # and decrement stack pointer Temp(T89(72))

# Copying Params into local Memory
	 lw 	 $a0, 12($fp) 	 #INT
	 lw 	 $t0, ($a0) 
	 sw 	 $t0, -4($fp) 	 #Copying INTEGER value
# END PARAM COPY
# BEGIN
# FUNCTION CALL TO (WRITEINT)
	 la 	 $t0, -4($fp)
	 sw 	 $t0, -12($fp)
# LOAD PARAM (T74(12))
	 la 	 $a0, -12($fp) 	 #loading address of (T74(12))
	 lw 	 $a0, ($a0) 	 #defreerce pointer
	 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
	 addi $sp, $sp, -4 	 #decrement stack

	 jal WRITEINT 	 #Jump to Function

	 #STORING RETURN VAL
	 #NO RETURN VALUE

	 #REMOVING PARAMS
	 addi $sp, $sp, -4 	 #inc stack

	 la 	 $t0, -8($fp)
	 sw 	 $t0, -20($fp)
	 li 	 $t0, 1
	 sw 	 $t0, -24($fp)
	#BEGIN ASSIGN STMT
	 lw 	 $t0,-20($fp)
	#INTEGER ASSIGNMENT
	 lw 	 $t1,-24($fp)
	 sw 	 $t1,($t0) 	 # Storing Result
	#END ASSIGN STMT
	 la 	 $t0, -8($fp)
	 sw 	 $t0, -28($fp)
	#BEGIN BOP (+)
	 la 	 $t0, -4($fp)
	 sw 	 $t0, -32($fp)
	 la 	 $t0, -8($fp)
	 sw 	 $t0, -36($fp)

		#LEFT HAND SIDE
	 lw 	 $a0, -32($fp)	 #RETRIVING LEFT ADDRESS 
	 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 

		#RIGHT HAND SIDE
	 lw 	 $a0, -36($fp)	 #RETRIVING RIGHT ADDRESS 
	 lw 	 $t1, ($a0)  	 #GETTING VALUE OF RIGHT ADDRESS 
	 add 	 $t2, $t0, $t1
	 sw 	 $t2, -40($fp)
	#END BOP(+)
	#BEGIN ASSIGN STMT
	 lw 	 $t0,-28($fp)
	#INTEGER ASSIGNMENT
	 lw 	 $t1,-40($fp)
	 sw 	 $t1,($t0) 	 # Storing Result
	#END ASSIGN STMT
	#START OF IF STMT
		#BEGIN BOP (>=)
		 la 	 $t0, -8($fp)
		 sw 	 $t0, -44($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -48($fp)
	
			#LEFT HAND SIDE
		 lw 	 $a0, -44($fp)	 #RETRIVING LEFT ADDRESS 
		 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
	
			#RIGHT HAND SIDE
		 lw 	 $t1,  -48($fp)	 #RETRIVING LEFT VALUE
		 sge 	 $t2, $t0, $t1
		 sw 	 $t2, -52($fp)
		#END BOP(>=)
		 lw 	 $t1,-52($fp)
		 beqz 	 $t1 ,L2
			#THEN STMT
		 li 	 $t0, 10
		 sw 	 $t0, -60($fp)
		#RETURN EXPRESSION
		#INTEGER ASSIGNMENT
		 la 	 $t0, -60($fp)
		 lw 	 $v1, ($t0)
		#END ASSIGN STMT
	j L3
	L2: #ELSE IF STMT
	# FUNCTION CALL TO (COUNTUP)
		 la 	 $t0, -8($fp)
		 sw 	 $t0, -68($fp)
	# LOAD PARAM (T88(68))
		 la 	 $a0, -68($fp) 	 #loading address of (T88(68))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal COUNTUP 	 #Jump to Function
	
		 #STORING RETURN VAL
		 sw 	 $v1, -72($fp)
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		#RETURN EXPRESSION
		#INTEGER ASSIGNMENT
		 la 	 $t0, -72($fp)
		 lw 	 $v1, ($t0)
		#END ASSIGN STMT
	L3: #END IF STMT
# END

	 move 	 $sp, $fp 	 # all local var's gone
	 addi 	 $sp, $sp, 4 	 # and pop that word
	 lw 	 $fp, ($sp) 	 # restore old $fp
	 addi 	 $sp, $sp, 4 	 # and pop that word
	 lw 	 $ra, ($sp) 	 # restore return address
	 jr 	 $ra 	 # return


# Program Main 
MAIN:
	sw	$fp,($sp)	# (PUSH) save previous frame pointer on stack 
	addi	$sp,$sp,-4	# and decrement stack pointer

	sw	$fp,($sp)	# (PUSH) save previous frame pointer on stack 
	addi	$sp,$sp,-4	# and decrement stack pointer

	move	$fp, $sp	# establish new frame pointer.

	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T90(4))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T91(8))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T92(12))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T93(16))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T94(20))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T95(24))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T96(28))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T97(32))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T98(36))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T99(40))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T100(44))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T101(48))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T102(52))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T103(56))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T104(60))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T105(64))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T106(68))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T107(72))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T108(76))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T109(80))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T110(84))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T111(88))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T112(92))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T113(96))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T114(100))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T115(104))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T116(108))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T117(112))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T118(116))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T119(120))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T120(124))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T121(128))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T122(132))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T123(136))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T124(140))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T125(144))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T126(148))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T127(152))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T128(156))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T129(160))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T141(172))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T139(184))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T134(188))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T135(192))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T136(196))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T137(200))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T142(204))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T143(208))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T144(216))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T146(220))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T147(224))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T148(232))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T150(236))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T151(240))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T152(248))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T154(252))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T155(256))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T156(264))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T158(268))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T159(272))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T160(280))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T162(284))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T163(288))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T164(296))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T166(300))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T167(304))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T168(312))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T170(316))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T171(320))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T172(328))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T174(332))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T175(336))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T176(344))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T178(348))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T179(352))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T180(360))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T182(364))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T183(368))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T184(376))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T186(380))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T187(384))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T188(392))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T190(396))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T191(404))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T193(408))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T194(412))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T195(416))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T196(424))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T198(428))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T199(432))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T200(440))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T202(444))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T203(448))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T204(456))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T206(460))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T207(468))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T209(472))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T210(476))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T211(480))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T212(488))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T214(492))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T215(496))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T216(504))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T218(508))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T219(512))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T220(520))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T222(524))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T223(528))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T224(536))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T226(540))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T227(544))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T228(552))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T230(556))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T231(560))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T232(568))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T234(572))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T235(576))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T236(584))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T238(588))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T239(592))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T240(600))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T242(604))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T243(608))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T244(616))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T246(620))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T247(624))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T248(632))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T250(636))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T251(640))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T252(648))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T254(652))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T255(656))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T256(664))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T258(668))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T259(672))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T260(676))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T261(680))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T262(684))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T263(688))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T264(692))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T265(696))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T266(700))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T267(704))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T268(708))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T269(712))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T270(716))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T271(720))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T272(724))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T273(728))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T274(732))
	addi	$sp,$sp,-4	# and decrement stack pointer Temp(T275(736))

		 la 	 $t0, X
		 sw 	 $t0, -4($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -8($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-4($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-8($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
		 la 	 $t0, Y
		 sw 	 $t0, -12($fp)
		 li 	 $t0, 5
		 sw 	 $t0, -16($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-12($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-16($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
		 la 	 $t0, XX
		 sw 	 $t0, -20($fp)
		 la 	 $t0, aa
		 sw 	 $t0, -24($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-20($fp)
		#REAL ASSIGNMENT
		 lw 	 $a1, -24($fp)
		 l.s 	 $f1, ($a1) 	 #deref real
		 s.s 	 $f1, ($t0) 	 #store 
		#END ASSIGN STMT
		 la 	 $t0, I
		 sw 	 $t0, -28($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -32($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-28($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-32($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
		 la 	 $t0, V
		 sw 	 $t0, -36($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -40($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-36($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-40($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
		 la 	 $t0, jj
		 sw 	 $t0, -44($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -48($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-44($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-48($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
		 la 	 $t0, sum
		 sw 	 $t0, -52($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -56($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-52($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-56($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
	
	L6: #BEGIN WHILE LOOP
			#BEGIN BOP (<)
			 la 	 $t0, I
			 sw 	 $t0, -60($fp)
			 li 	 $t0, 10
			 sw 	 $t0, -64($fp)
		
				#LEFT HAND SIDE
			 lw 	 $a0, -60($fp)	 #RETRIVING LEFT ADDRESS 
			 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
		
				#RIGHT HAND SIDE
			 lw 	 $t1,  -64($fp)	 #RETRIVING LEFT VALUE
			 slt 	 $t2, $t0, $t1
			 sw 	 $t2, -68($fp)
			#END BOP(<)
			 lw 	 $t1,-68($fp)
			 beqz 	 $t1 ,L7
			 la 	 $t0, V
			 sw 	 $t0, -72($fp)
			 li 	 $t0, 0
			 sw 	 $t0, -76($fp)
			#BEGIN ASSIGN STMT
			 lw 	 $t0,-72($fp)
			#INTEGER ASSIGNMENT
			 lw 	 $t1,-76($fp)
			 sw 	 $t1,($t0) 	 # Storing Result
			#END ASSIGN STMT
		
		L4: #BEGIN WHILE LOOP
				#BEGIN BOP (<)
				 la 	 $t0, V
				 sw 	 $t0, -80($fp)
				 li 	 $t0, 10
				 sw 	 $t0, -84($fp)
			
					#LEFT HAND SIDE
				 lw 	 $a0, -80($fp)	 #RETRIVING LEFT ADDRESS 
				 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
			
					#RIGHT HAND SIDE
				 lw 	 $t1,  -84($fp)	 #RETRIVING LEFT VALUE
				 slt 	 $t2, $t0, $t1
				 sw 	 $t2, -88($fp)
				#END BOP(<)
				 lw 	 $t1,-88($fp)
				 beqz 	 $t1 ,L5
				 la 	 $t0, sum
				 sw 	 $t0, -92($fp)
				#BEGIN BOP (+)
				 la 	 $t0, sum
				 sw 	 $t0, -96($fp)
				#BEGIN BOP (+)
				 la 	 $t0, V
				 sw 	 $t0, -100($fp)
				 li 	 $t0, 1
				 sw 	 $t0, -104($fp)
			
					#LEFT HAND SIDE
				 lw 	 $a0, -100($fp)	 #RETRIVING LEFT ADDRESS 
				 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
			
					#RIGHT HAND SIDE
				 lw 	 $t1,  -104($fp)	 #RETRIVING LEFT VALUE
				 add 	 $t2, $t0, $t1
				 sw 	 $t2, -108($fp)
				#END BOP(+)
			
					#LEFT HAND SIDE
				 lw 	 $a0, -96($fp)	 #RETRIVING LEFT ADDRESS 
				 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
			
					#RIGHT HAND SIDE
				 lw 	 $t1,  -108($fp)	 #RETRIVING LEFT VALUE
				 add 	 $t2, $t0, $t1
				 sw 	 $t2, -112($fp)
				#END BOP(+)
				#BEGIN ASSIGN STMT
				 lw 	 $t0,-92($fp)
				#INTEGER ASSIGNMENT
				 lw 	 $t1,-112($fp)
				 sw 	 $t1,($t0) 	 # Storing Result
				#END ASSIGN STMT
				 la 	 $t0, V
				 sw 	 $t0, -116($fp)
				#BEGIN BOP (+)
				 la 	 $t0, V
				 sw 	 $t0, -120($fp)
				 li 	 $t0, 1
				 sw 	 $t0, -124($fp)
			
					#LEFT HAND SIDE
				 lw 	 $a0, -120($fp)	 #RETRIVING LEFT ADDRESS 
				 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
			
					#RIGHT HAND SIDE
				 lw 	 $t1,  -124($fp)	 #RETRIVING LEFT VALUE
				 add 	 $t2, $t0, $t1
				 sw 	 $t2, -128($fp)
				#END BOP(+)
				#BEGIN ASSIGN STMT
				 lw 	 $t0,-116($fp)
				#INTEGER ASSIGNMENT
				 lw 	 $t1,-128($fp)
				 sw 	 $t1,($t0) 	 # Storing Result
				#END ASSIGN STMT
			j L4
		L5: 	 #END WHILE LOOP
		
			 la 	 $t0, I
			 sw 	 $t0, -132($fp)
			#BEGIN BOP (+)
			 la 	 $t0, I
			 sw 	 $t0, -136($fp)
			 li 	 $t0, 1
			 sw 	 $t0, -140($fp)
		
				#LEFT HAND SIDE
			 lw 	 $a0, -136($fp)	 #RETRIVING LEFT ADDRESS 
			 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
		
				#RIGHT HAND SIDE
			 lw 	 $t1,  -140($fp)	 #RETRIVING LEFT VALUE
			 add 	 $t2, $t0, $t1
			 sw 	 $t2, -144($fp)
			#END BOP(+)
			#BEGIN ASSIGN STMT
			 lw 	 $t0,-132($fp)
			#INTEGER ASSIGNMENT
			 lw 	 $t1,-144($fp)
			 sw 	 $t1,($t0) 	 # Storing Result
			#END ASSIGN STMT
		j L6
	L7: 	 #END WHILE LOOP
	
	# FUNCTION CALL TO (WRITEINT)
		 la 	 $t0, sum
		 sw 	 $t0, -148($fp)
	# LOAD PARAM (T126(148))
		 la 	 $a0, -148($fp) 	 #loading address of (T126(148))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEINT 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		 la 	 $t0, sum
		 sw 	 $t0, -156($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -160($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-156($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-160($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
		 li 	 $t0, 1
		 sw 	 $t0, -164($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -168($fp)
	#FOR LOOP - SETUP
		#ASSIGNING FROM pointer to Counter
		 la 	 $t0,-164($fp)
		 sw 	 $t0,  -172($fp)	 #loading reqtemp
	L10: 	 #BEGIN FOR LOOP
			#loading 'req temp' value
			 lw 	 $a0, -172($fp)
			 lw 	 $t0, ($a0) 	 #deref to int
			#loading 'to' value
			 lw 	 $t1,-168($fp)
		 		#compare Less than or equal
			 sle 	 $t2, $t0, $t1
			 beqz 	 $t2, L11
			 #loop statements
			 li 	 $t0, 1
			 sw 	 $t0, -176($fp)
			 li 	 $t0, 10
			 sw 	 $t0, -180($fp)
		#FOR LOOP - SETUP
			#ASSIGNING FROM pointer to Counter
			 la 	 $t0,-176($fp)
			 sw 	 $t0,  -184($fp)	 #loading reqtemp
		L8: 	 #BEGIN FOR LOOP
				#loading 'req temp' value
				 lw 	 $a0, -184($fp)
				 lw 	 $t0, ($a0) 	 #deref to int
				#loading 'to' value
				 lw 	 $t1,-180($fp)
			 		#compare Less than or equal
				 sle 	 $t2, $t0, $t1
				 beqz 	 $t2, L9
				 #loop statements
				 la 	 $t0, sum
				 sw 	 $t0, -188($fp)
				#BEGIN BOP (+)
				 la 	 $t0, sum
				 sw 	 $t0, -192($fp)
				 li 	 $t0, 1
				 sw 	 $t0, -196($fp)
			
					#LEFT HAND SIDE
				 lw 	 $a0, -192($fp)	 #RETRIVING LEFT ADDRESS 
				 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
			
					#RIGHT HAND SIDE
				 lw 	 $t1,  -196($fp)	 #RETRIVING LEFT VALUE
				 add 	 $t2, $t0, $t1
				 sw 	 $t2, -200($fp)
				#END BOP(+)
				#BEGIN ASSIGN STMT
				 lw 	 $t0,-188($fp)
				#INTEGER ASSIGNMENT
				 lw 	 $t1,-200($fp)
				 sw 	 $t1,($t0) 	 # Storing Result
				#END ASSIGN STMT
				 #end loop statements
				#loading reqtemp value
				 lw 	 $a0, -184($fp)
				 lw 	 $t0, ($a0) 	 #deref to int
				 addi 	 $t0, $t0, 1 	 #increment counter
				 lw 	 $a0, -184($fp)
				 sw 	 $t0, ($a0) 	 #store 
				 j L8
		L9: 	 #END FOR LOOP
		
			 #end loop statements
			#loading reqtemp value
			 lw 	 $a0, -172($fp)
			 lw 	 $t0, ($a0) 	 #deref to int
			 addi 	 $t0, $t0, 1 	 #increment counter
			 lw 	 $a0, -172($fp)
			 sw 	 $t0, ($a0) 	 #store 
			 j L10
	L11: 	 #END FOR LOOP
	
	# FUNCTION CALL TO (WRITEINT)
		 la 	 $t0, sum
		 sw 	 $t0, -204($fp)
	# LOAD PARAM (T142(204))
		 la 	 $a0, -204($fp) 	 #loading address of (T142(204))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEINT 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -212($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -216($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -216($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -212($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -220($fp) 	 #store new pointer in temp
	
	.data
		float0:	.float 0.0
	.text
		 l.s 	 $f3, float0
		 s.s 	 $f3, -224($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-220($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-220($fp)
		 l.s 	 $f1, -224($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -228($fp)
		 li 	 $t0, 1
		 sw 	 $t0, -232($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -232($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -228($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -236($fp) 	 #store new pointer in temp
	
	.data
		float1:	.float 1.0
	.text
		 l.s 	 $f3, float1
		 s.s 	 $f3, -240($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-236($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-236($fp)
		 l.s 	 $f1, -240($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -244($fp)
		 li 	 $t0, 2
		 sw 	 $t0, -248($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -248($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -244($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -252($fp) 	 #store new pointer in temp
	
	.data
		float2:	.float 2.0
	.text
		 l.s 	 $f3, float2
		 s.s 	 $f3, -256($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-252($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-252($fp)
		 l.s 	 $f1, -256($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -260($fp)
		 li 	 $t0, 3
		 sw 	 $t0, -264($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -264($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -260($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -268($fp) 	 #store new pointer in temp
	
	.data
		float3:	.float 3.0
	.text
		 l.s 	 $f3, float3
		 s.s 	 $f3, -272($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-268($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-268($fp)
		 l.s 	 $f1, -272($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -276($fp)
		 li 	 $t0, 4
		 sw 	 $t0, -280($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -280($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -276($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -284($fp) 	 #store new pointer in temp
	
	.data
		float4:	.float 4.0
	.text
		 l.s 	 $f3, float4
		 s.s 	 $f3, -288($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-284($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-284($fp)
		 l.s 	 $f1, -288($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -292($fp)
		 li 	 $t0, 5
		 sw 	 $t0, -296($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -296($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -292($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -300($fp) 	 #store new pointer in temp
	
	.data
		float5:	.float 5.0
	.text
		 l.s 	 $f3, float5
		 s.s 	 $f3, -304($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-300($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-300($fp)
		 l.s 	 $f1, -304($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -308($fp)
		 li 	 $t0, 6
		 sw 	 $t0, -312($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -312($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -308($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -316($fp) 	 #store new pointer in temp
	
	.data
		float6:	.float 6.0
	.text
		 l.s 	 $f3, float6
		 s.s 	 $f3, -320($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-316($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-316($fp)
		 l.s 	 $f1, -320($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -324($fp)
		 li 	 $t0, 7
		 sw 	 $t0, -328($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -328($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -324($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -332($fp) 	 #store new pointer in temp
	
	.data
		float7:	.float 7.0
	.text
		 l.s 	 $f3, float7
		 s.s 	 $f3, -336($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-332($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-332($fp)
		 l.s 	 $f1, -336($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -340($fp)
		 li 	 $t0, 8
		 sw 	 $t0, -344($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -344($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -340($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -348($fp) 	 #store new pointer in temp
	
	.data
		float8:	.float 8.0
	.text
		 l.s 	 $f3, float8
		 s.s 	 $f3, -352($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-348($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-348($fp)
		 l.s 	 $f1, -352($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -356($fp)
		 li 	 $t0, 9
		 sw 	 $t0, -360($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -360($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -356($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -364($fp) 	 #store new pointer in temp
	
	.data
		float9:	.float 9.0
	.text
		 l.s 	 $f3, float9
		 s.s 	 $f3, -368($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-364($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-364($fp)
		 l.s 	 $f1, -368($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -372($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -376($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -376($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -372($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -380($fp) 	 #store new pointer in temp
	
	.data
		float10:	.float 10.0
	.text
		 l.s 	 $f3, float10
		 s.s 	 $f3, -384($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-380($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-380($fp)
		 l.s 	 $f1, -384($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -388($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -392($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -392($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -388($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -396($fp) 	 #store new pointer in temp
	
		#BEGIN BOP (*)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -400($fp)
		 li 	 $t0, 2
		 sw 	 $t0, -404($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -404($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -400($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -408($fp) 	 #store new pointer in temp
	
	.data
		float11:	.float 40.0
	.text
		 l.s 	 $f3, float11
		 s.s 	 $f3, -412($fp)
	
			#LEFT HAND SIDE
		 lw 	 $a0, -408($fp)	 #RETRIVING LEFT ADDRESS 
		 l.s 	 $f0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
	
			#RIGHT HAND SIDE
		 l.s 	 $f1,  -412($fp)	 #RETRIVING LEFT VALUE
		 mul.s 	 $f2, $f0, $f1
		 s.s 	 $f2, -416($fp)
		#END BOP(*)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-396($fp)
		#REAL ASSIGNMENT
	
		 lw 	 $a0,-396($fp)
		 l.s 	 $f1, -416($fp) 	 #load direct value
		 s.s 	 $f1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, MOH_ARRAY
		 sw 	 $t0, -420($fp)
		 li 	 $t0, 2
		 sw 	 $t0, -424($fp)
	
		 #Calculating Index of (MOH_ARRAY)
		 lw 	 $t0, -424($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -420($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -428($fp) 	 #store new pointer in temp
	
		 li 	 $t0, 2
		 sw 	 $t0, -432($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-428($fp)
		#INTEGER ASSIGNMENT
	
		 lw 	 $a0,-428($fp)
		 lw 	 $t1, -432($fp) 	 #load direct value
		 sw 	 $t1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, MOH_ARRAY
		 sw 	 $t0, -436($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -440($fp)
	
		 #Calculating Index of (MOH_ARRAY)
		 lw 	 $t0, -440($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -436($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -444($fp) 	 #store new pointer in temp
	
		 li 	 $t0, 10
		 sw 	 $t0, -448($fp)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-444($fp)
		#INTEGER ASSIGNMENT
	
		 lw 	 $a0,-444($fp)
		 lw 	 $t1, -448($fp) 	 #load direct value
		 sw 	 $t1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
		 la 	 $t0, MOH_ARRAY
		 sw 	 $t0, -452($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -456($fp)
	
		 #Calculating Index of (MOH_ARRAY)
		 lw 	 $t0, -456($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -452($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -460($fp) 	 #store new pointer in temp
	
		#BEGIN BOP (*)
		 la 	 $t0, MOH_ARRAY
		 sw 	 $t0, -464($fp)
		 li 	 $t0, 2
		 sw 	 $t0, -468($fp)
	
		 #Calculating Index of (MOH_ARRAY)
		 lw 	 $t0, -468($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -464($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -472($fp) 	 #store new pointer in temp
	
		 li 	 $t0, 40
		 sw 	 $t0, -476($fp)
	
			#LEFT HAND SIDE
		 lw 	 $a0, -472($fp)	 #RETRIVING LEFT ADDRESS 
		 lw 	 $t0, ($a0) 	 #GETTING VALUE OF LEFT ADDRESS 
	
			#RIGHT HAND SIDE
		 lw 	 $t1,  -476($fp)	 #RETRIVING LEFT VALUE
		 mul 	 $t2, $t0, $t1
		 sw 	 $t2, -480($fp)
		#END BOP(*)
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-460($fp)
		#INTEGER ASSIGNMENT
	
		 lw 	 $a0,-460($fp)
		 lw 	 $t1, -480($fp) 	 #load direct value
		 sw 	 $t1, ($a0) 	 #store to memory
	
		#END ASSIGN STMT
	# FUNCTION CALL TO (WRITEINT)
		 la 	 $t0, MOH_ARRAY
		 sw 	 $t0, -484($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -488($fp)
	
		 #Calculating Index of (MOH_ARRAY)
		 lw 	 $t0, -488($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -484($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -492($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T212(488))
		 la 	 $a0, -488($fp) 	 #loading address of (T212(488))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T214(492))
		 la 	 $a0, -492($fp) 	 #loading address of (T214(492))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEINT 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -500($fp)
		 li 	 $t0, 0
		 sw 	 $t0, -504($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -504($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -500($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -508($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T216(504))
		 la 	 $a0, -504($fp) 	 #loading address of (T216(504))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T218(508))
		 la 	 $a0, -508($fp) 	 #loading address of (T218(508))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -516($fp)
		 li 	 $t0, 1
		 sw 	 $t0, -520($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -520($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -516($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -524($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T220(520))
		 la 	 $a0, -520($fp) 	 #loading address of (T220(520))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T222(524))
		 la 	 $a0, -524($fp) 	 #loading address of (T222(524))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -532($fp)
		 li 	 $t0, 2
		 sw 	 $t0, -536($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -536($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -532($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -540($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T224(536))
		 la 	 $a0, -536($fp) 	 #loading address of (T224(536))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T226(540))
		 la 	 $a0, -540($fp) 	 #loading address of (T226(540))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -548($fp)
		 li 	 $t0, 3
		 sw 	 $t0, -552($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -552($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -548($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -556($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T228(552))
		 la 	 $a0, -552($fp) 	 #loading address of (T228(552))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T230(556))
		 la 	 $a0, -556($fp) 	 #loading address of (T230(556))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -564($fp)
		 li 	 $t0, 4
		 sw 	 $t0, -568($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -568($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -564($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -572($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T232(568))
		 la 	 $a0, -568($fp) 	 #loading address of (T232(568))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T234(572))
		 la 	 $a0, -572($fp) 	 #loading address of (T234(572))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -580($fp)
		 li 	 $t0, 5
		 sw 	 $t0, -584($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -584($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -580($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -588($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T236(584))
		 la 	 $a0, -584($fp) 	 #loading address of (T236(584))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T238(588))
		 la 	 $a0, -588($fp) 	 #loading address of (T238(588))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -596($fp)
		 li 	 $t0, 6
		 sw 	 $t0, -600($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -600($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -596($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -604($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T240(600))
		 la 	 $a0, -600($fp) 	 #loading address of (T240(600))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T242(604))
		 la 	 $a0, -604($fp) 	 #loading address of (T242(604))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -612($fp)
		 li 	 $t0, 7
		 sw 	 $t0, -616($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -616($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -612($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -620($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T244(616))
		 la 	 $a0, -616($fp) 	 #loading address of (T244(616))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T246(620))
		 la 	 $a0, -620($fp) 	 #loading address of (T246(620))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -628($fp)
		 li 	 $t0, 8
		 sw 	 $t0, -632($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -632($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -628($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -636($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T248(632))
		 la 	 $a0, -632($fp) 	 #loading address of (T248(632))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T250(636))
		 la 	 $a0, -636($fp) 	 #loading address of (T250(636))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -644($fp)
		 li 	 $t0, 9
		 sw 	 $t0, -648($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -648($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -644($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -652($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T252(648))
		 la 	 $a0, -648($fp) 	 #loading address of (T252(648))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T254(652))
		 la 	 $a0, -652($fp) 	 #loading address of (T254(652))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, TOM_ARRAY
		 sw 	 $t0, -660($fp)
		 li 	 $t0, 10
		 sw 	 $t0, -664($fp)
	
		 #Calculating Index of (TOM_ARRAY)
		 lw 	 $t0, -664($fp) 	 #Index
		 li 	 $t1, 4 	 #size of element 
		 mul 	 $t2, $t0, $t1 
		 lw 	 $a0, -660($fp)
		 add 	 $a0, $a0, $t2 	 #Increment Pointer 
		 sw 	 $a0, -668($fp) 	 #store new pointer in temp
	
	# LOAD PARAM (T256(664))
		 la 	 $a0, -664($fp) 	 #loading address of (T256(664))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	# LOAD PARAM (T258(668))
		 la 	 $a0, -668($fp) 	 #loading address of (T258(668))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, XX
		 sw 	 $t0, -676($fp)
	# LOAD PARAM (T260(676))
		 la 	 $a0, -676($fp) 	 #loading address of (T260(676))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEREAL)
		 la 	 $t0, aa
		 sw 	 $t0, -684($fp)
	# LOAD PARAM (T262(684))
		 la 	 $a0, -684($fp) 	 #loading address of (T262(684))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEREAL 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		 la 	 $t0, Z
		 sw 	 $t0, -692($fp)
	# FUNCTION CALL TO (COUNTDOWN)
		 li 	 $t0, 10
		 sw 	 $t0, -696($fp)
	# LOAD PARAM (T265(696))
		 la 	 $a0, -696($fp) 	 #loading address of (T265(696))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal COUNTDOWN 	 #Jump to Function
	
		 #STORING RETURN VAL
		 sw 	 $v1, -700($fp)
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-692($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-700($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
	# FUNCTION CALL TO (WRITECHAR)
		 la 	 $t0, p0
		 sw 	 $t0, -704($fp)
	# LOAD PARAM (T267(704))
		 la 	 $a0, -704($fp) 	 #loading address of (T267(704))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITECHAR 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITECHAR)
		 la 	 $t0, p4
		 sw 	 $t0, -712($fp)
	# LOAD PARAM (T269(712))
		 la 	 $a0, -712($fp) 	 #loading address of (T269(712))
		 lw 	 $a0, ($a0) 	 #defreerce pointer
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITECHAR 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
	# FUNCTION CALL TO (WRITEINT)
		 li 	 $t0, 1337
		 sw 	 $t0, -720($fp)
	# LOAD PARAM (T271(720))
		 la 	 $a0, -720($fp) 	 #loading address of (T271(720))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal WRITEINT 	 #Jump to Function
	
		 #STORING RETURN VAL
		 #NO RETURN VALUE
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		 la 	 $t0, Z
		 sw 	 $t0, -728($fp)
	# FUNCTION CALL TO (COUNTUP)
		 li 	 $t0, 0
		 sw 	 $t0, -732($fp)
	# LOAD PARAM (T274(732))
		 la 	 $a0, -732($fp) 	 #loading address of (T274(732))
		 sw 	 $a0 , ($sp) 	 #Pushing onto Stack
		 addi $sp, $sp, -4 	 #decrement stack
	
		 jal COUNTUP 	 #Jump to Function
	
		 #STORING RETURN VAL
		 sw 	 $v1, -736($fp)
	
		 #REMOVING PARAMS
		 addi $sp, $sp, -4 	 #inc stack
	
		#BEGIN ASSIGN STMT
		 lw 	 $t0,-728($fp)
		#INTEGER ASSIGNMENT
		 lw 	 $t1,-736($fp)
		 sw 	 $t1,($t0) 	 # Storing Result
		#END ASSIGN STMT
		 li 	 $v0, 10		 # system call code for exit = 10
		 syscall 	 # call operating sys
# New line to make some simulators happy

