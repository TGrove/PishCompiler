
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 31 02:46:16 EDT 2010
//----------------------------------------------------

package pish;

import java_cup.runtime.*;
import pish.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 31 02:46:16 EDT 2010
  */
public class PishCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PishCup() {super();}

  /** Constructor which sets the default scanner. */
  public PishCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PishCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\016\000\002\002" +
    "\015\000\002\002\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\003\000\002\004\004\000\002\004\002\000" +
    "\002\005\007\000\002\005\006\000\002\005\003\000\002" +
    "\005\002\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\007\004\000\002\007\002\000\002\010\007" +
    "\000\002\010\002\000\002\011\004\000\002\011\002\000" +
    "\002\012\007\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\005\000\002\016\002\000\002\017\006\000" +
    "\002\017\011\000\002\017\007\000\002\022\010\000\002" +
    "\022\005\000\002\022\006\000\002\022\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\002\000\002\021\005" +
    "\000\002\021\007\000\002\023\005\000\002\024\003\000" +
    "\002\024\002\000\002\026\003\000\002\026\005\000\002" +
    "\025\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\006\000\002\025\012\000\002\025\006\000\002\025\010" +
    "\000\002\025\003\000\002\030\003\000\002\030\003\000" +
    "\002\031\003\000\002\031\006\000\002\031\004\000\002" +
    "\031\007\000\002\043\005\000\002\043\004\000\002\033" +
    "\003\000\002\033\006\000\002\034\003\000\002\034\005" +
    "\000\002\032\003\000\002\032\005\000\002\032\005\000" +
    "\002\035\003\000\002\035\004\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\036\003\000\002\036" +
    "\005\000\002\040\003\000\002\040\006\000\002\040\006" +
    "\000\002\040\003\000\002\040\003\000\002\040\005\000" +
    "\002\040\004\000\002\027\003\000\002\027\003\000\002" +
    "\037\003\000\002\037\003\000\002\041\013\000\002\042" +
    "\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\003\005\016\006\001\002\000\004\002" +
    "\266\001\002\000\004\002\ufffe\001\002\000\004\051\007" +
    "\001\002\000\004\042\010\001\002\000\006\003\012\051" +
    "\011\001\002\000\010\035\ufffd\036\ufffd\043\ufffd\001\002" +
    "\000\010\035\ufffb\036\ufffb\043\ufffb\001\002\000\006\035" +
    "\014\043\015\001\002\000\004\051\265\001\002\000\004" +
    "\025\016\001\002\000\016\006\ufff9\015\ufff9\021\ufff9\022" +
    "\ufff9\031\017\032\ufff9\001\002\000\020\003\253\006\ufff5" +
    "\015\ufff5\021\ufff5\022\ufff5\032\ufff5\051\ufff5\001\002\000" +
    "\014\006\ufff0\015\ufff0\021\ufff0\022\022\032\ufff0\001\002" +
    "\000\012\006\063\015\uffec\021\uffec\032\uffec\001\002\000" +
    "\014\006\uffee\015\uffee\021\uffee\032\uffee\051\uffee\001\002" +
    "\000\014\006\ufff1\015\ufff1\021\ufff1\032\ufff1\051\024\001" +
    "\002\000\004\005\025\001\002\000\016\023\031\030\027" +
    "\046\037\047\026\050\035\051\033\001\002\000\006\025" +
    "\uffe4\043\uffe4\001\002\000\004\044\047\001\002\000\006" +
    "\025\uffe5\043\uffe5\001\002\000\010\003\uffea\010\uffea\051" +
    "\uffea\001\002\000\006\025\uffe8\043\uffe8\001\002\000\006" +
    "\025\uffe6\043\uffe6\001\002\000\004\025\040\001\002\000" +
    "\006\025\uffe3\043\uffe3\001\002\000\006\025\uffe9\043\uffe9" +
    "\001\002\000\006\025\uffe2\043\uffe2\001\002\000\014\006" +
    "\uffef\015\uffef\021\uffef\032\uffef\051\uffef\001\002\000\010" +
    "\003\012\010\043\051\011\001\002\000\006\035\014\036" +
    "\044\001\002\000\006\025\uffe7\043\uffe7\001\002\000\016" +
    "\023\031\030\027\046\037\047\026\050\035\051\033\001" +
    "\002\000\004\025\046\001\002\000\016\003\uffeb\010\uffeb" +
    "\015\uffeb\021\uffeb\032\uffeb\051\uffeb\001\002\000\010\051" +
    "\050\055\054\056\053\001\002\000\032\006\uffa3\007\uffa3" +
    "\013\uffa3\015\uffa3\021\uffa3\022\uffa3\025\uffa3\032\uffa3\033" +
    "\uffa3\041\uffa3\045\uffa3\051\uffa3\001\002\000\032\006\uffa4" +
    "\007\uffa4\013\uffa4\015\uffa4\021\uffa4\022\uffa4\025\uffa4\032" +
    "\uffa4\033\uffa4\041\uffa4\045\uffa4\051\uffa4\001\002\000\004" +
    "\041\055\001\002\000\060\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\010\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8\021\uffa8" +
    "\022\uffa8\025\uffa8\032\uffa8\033\uffa8\035\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\043\uffa8\045\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\001\002\000\060\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\021\uffa9\022\uffa9" +
    "\025\uffa9\032\uffa9\033\uffa9\035\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\043\uffa9\045\uffa9\051\uffa9\052\uffa9\053\uffa9\001\002" +
    "\000\004\041\056\001\002\000\010\051\050\055\054\056" +
    "\053\001\002\000\004\045\060\001\002\000\004\017\061" +
    "\001\002\000\016\023\031\030\027\046\037\047\026\050" +
    "\035\051\033\001\002\000\006\025\uffa5\043\uffa5\001\002" +
    "\000\014\003\uffea\015\uffea\021\uffea\032\uffea\051\uffea\001" +
    "\002\000\010\015\uffe0\021\uffe0\032\uffe0\001\002\000\010" +
    "\015\067\021\070\032\073\001\002\000\012\006\063\015" +
    "\uffec\021\uffec\032\uffec\001\002\000\004\051\242\001\002" +
    "\000\022\010\uffd1\012\120\015\067\020\125\021\070\026" +
    "\122\032\073\051\126\001\002\000\004\025\117\001\002" +
    "\000\006\002\uffff\041\116\001\002\000\004\051\074\001" +
    "\002\000\010\025\075\036\uffd6\042\077\001\002\000\012" +
    "\006\uffdb\015\uffdb\021\uffdb\032\uffdb\001\002\000\004\036" +
    "\112\001\002\000\010\003\012\043\100\051\011\001\002" +
    "\000\006\025\uffd7\036\uffd7\001\002\000\006\035\014\036" +
    "\110\001\002\000\006\025\104\043\103\001\002\000\006" +
    "\025\uffd8\036\uffd8\001\002\000\006\003\012\051\011\001" +
    "\002\000\006\035\014\036\106\001\002\000\016\023\031" +
    "\030\027\046\037\047\026\050\035\051\033\001\002\000" +
    "\006\025\uffd4\043\uffd4\001\002\000\016\023\031\030\027" +
    "\046\037\047\026\050\035\051\033\001\002\000\006\025" +
    "\uffd5\043\uffd5\001\002\000\012\046\037\047\026\050\035" +
    "\051\033\001\002\000\004\025\114\001\002\000\014\006" +
    "\uffdc\015\uffdc\021\uffdc\027\115\032\uffdc\001\002\000\010" +
    "\010\uffde\014\uffde\025\uffde\001\002\000\004\002\000\001" +
    "\002\000\010\015\uffe1\021\uffe1\032\uffe1\001\002\000\022" +
    "\024\156\037\151\040\144\042\157\051\154\054\147\055" +
    "\054\056\053\001\002\000\010\010\uffcd\014\uffcd\025\uffcd" +
    "\001\002\000\004\051\226\001\002\000\004\034\224\001" +
    "\002\000\010\010\uffcc\014\uffcc\025\uffcc\001\002\000\022" +
    "\024\156\037\151\040\144\042\157\051\154\054\147\055" +
    "\054\056\053\001\002\000\020\010\uffbe\014\uffbe\025\uffbe" +
    "\034\uffc4\041\141\042\140\044\137\001\002\000\006\010" +
    "\uffd0\025\uffd0\001\002\000\010\010\uffc7\014\uffc7\025\uffc7" +
    "\001\002\000\004\010\135\001\002\000\006\010\uffd2\025" +
    "\133\001\002\000\020\012\120\015\067\020\125\021\070" +
    "\026\122\032\073\051\126\001\002\000\006\010\uffcf\025" +
    "\uffcf\001\002\000\014\002\uffd3\010\uffd3\014\uffd3\025\uffd3" +
    "\041\uffd3\001\002\000\006\034\uffc2\041\215\001\002\000" +
    "\022\024\156\037\151\040\144\042\157\051\154\054\147" +
    "\055\054\056\053\001\002\000\022\024\156\037\151\040" +
    "\144\042\157\051\154\054\147\055\054\056\053\001\002" +
    "\000\004\051\142\001\002\000\010\034\uffc4\041\141\044" +
    "\137\001\002\000\006\034\uffbf\041\uffbf\001\002\000\016" +
    "\024\uffa6\042\uffa6\051\uffa6\054\uffa6\055\uffa6\056\uffa6\001" +
    "\002\000\016\024\156\042\157\051\154\054\147\055\054" +
    "\056\053\001\002\000\036\004\uffb7\005\uffb7\010\uffb7\011" +
    "\uffb7\014\uffb7\025\uffb7\033\uffb7\035\uffb7\037\uffb7\040\uffb7" +
    "\043\uffb7\045\uffb7\052\uffb7\053\203\001\002\000\036\004" +
    "\uffac\005\uffac\010\uffac\011\uffac\014\uffac\025\uffac\033\uffac" +
    "\035\uffac\037\uffac\040\uffac\043\uffac\045\uffac\052\uffac\053" +
    "\uffac\001\002\000\036\004\uffad\005\uffad\010\uffad\011\uffad" +
    "\014\uffad\025\uffad\033\uffad\035\uffad\037\uffad\040\uffad\043" +
    "\uffad\045\uffad\052\uffad\053\uffad\001\002\000\016\024\uffa7" +
    "\042\uffa7\051\uffa7\054\uffa7\055\uffa7\056\uffa7\001\002\000" +
    "\006\035\uffbc\043\uffbc\001\002\000\034\004\201\005\177" +
    "\010\uffba\011\uffba\014\uffba\025\uffba\033\uffba\035\uffba\037" +
    "\176\040\200\043\uffba\045\uffba\052\175\001\002\000\042" +
    "\004\uffb0\005\uffb0\010\uffb0\011\uffb0\014\uffb0\025\uffb0\033" +
    "\uffb0\035\uffb0\037\uffb0\040\uffb0\042\170\043\uffb0\044\167" +
    "\045\uffb0\052\uffb0\053\uffb0\001\002\000\036\004\uffb2\005" +
    "\uffb2\010\uffb2\011\uffb2\014\uffb2\025\uffb2\033\uffb2\035\uffb2" +
    "\037\uffb2\040\uffb2\043\uffb2\045\uffb2\052\uffb2\053\uffb2\001" +
    "\002\000\016\024\156\042\157\051\154\054\147\055\054" +
    "\056\053\001\002\000\022\024\156\037\151\040\144\042" +
    "\157\051\154\054\147\055\054\056\053\001\002\000\006" +
    "\035\161\043\162\001\002\000\022\024\156\037\151\040" +
    "\144\042\157\051\154\054\147\055\054\056\053\001\002" +
    "\000\010\010\uffbd\014\uffbd\025\uffbd\001\002\000\006\035" +
    "\uffbb\043\uffbb\001\002\000\004\043\165\001\002\000\036" +
    "\004\uffab\005\uffab\010\uffab\011\uffab\014\uffab\025\uffab\033" +
    "\uffab\035\uffab\037\uffab\040\uffab\043\uffab\045\uffab\052\uffab" +
    "\053\uffab\001\002\000\036\004\uffaa\005\uffaa\010\uffaa\011" +
    "\uffaa\014\uffaa\025\uffaa\033\uffaa\035\uffaa\037\uffaa\040\uffaa" +
    "\043\uffaa\045\uffaa\052\uffaa\053\uffaa\001\002\000\022\024" +
    "\156\037\151\040\144\042\157\051\154\054\147\055\054" +
    "\056\053\001\002\000\022\024\156\037\151\040\144\042" +
    "\157\051\154\054\147\055\054\056\053\001\002\000\006" +
    "\035\161\043\172\001\002\000\036\004\uffae\005\uffae\010" +
    "\uffae\011\uffae\014\uffae\025\uffae\033\uffae\035\uffae\037\uffae" +
    "\040\uffae\043\uffae\045\uffae\052\uffae\053\uffae\001\002\000" +
    "\004\045\174\001\002\000\036\004\uffaf\005\uffaf\010\uffaf" +
    "\011\uffaf\014\uffaf\025\uffaf\033\uffaf\035\uffaf\037\uffaf\040" +
    "\uffaf\043\uffaf\045\uffaf\052\uffaf\053\uffaf\001\002\000\022" +
    "\024\156\037\151\040\144\042\157\051\154\054\147\055" +
    "\054\056\053\001\002\000\016\024\156\042\157\051\154" +
    "\054\147\055\054\056\053\001\002\000\022\024\156\037" +
    "\151\040\144\042\157\051\154\054\147\055\054\056\053" +
    "\001\002\000\016\024\156\042\157\051\154\054\147\055" +
    "\054\056\053\001\002\000\016\024\156\042\157\051\154" +
    "\054\147\055\054\056\053\001\002\000\036\004\uffb5\005" +
    "\uffb5\010\uffb5\011\uffb5\014\uffb5\025\uffb5\033\uffb5\035\uffb5" +
    "\037\uffb5\040\uffb5\043\uffb5\045\uffb5\052\uffb5\053\203\001" +
    "\002\000\016\024\156\042\157\051\154\054\147\055\054" +
    "\056\053\001\002\000\036\004\uffb1\005\uffb1\010\uffb1\011" +
    "\uffb1\014\uffb1\025\uffb1\033\uffb1\035\uffb1\037\uffb1\040\uffb1" +
    "\043\uffb1\045\uffb1\052\uffb1\053\uffb1\001\002\000\036\004" +
    "\uffb3\005\uffb3\010\uffb3\011\uffb3\014\uffb3\025\uffb3\033\uffb3" +
    "\035\uffb3\037\uffb3\040\uffb3\043\uffb3\045\uffb3\052\uffb3\053" +
    "\203\001\002\000\030\004\201\010\uffb8\011\uffb8\014\uffb8" +
    "\025\uffb8\033\uffb8\035\uffb8\037\176\040\200\043\uffb8\045" +
    "\uffb8\001\002\000\036\004\uffb4\005\uffb4\010\uffb4\011\uffb4" +
    "\014\uffb4\025\uffb4\033\uffb4\035\uffb4\037\uffb4\040\uffb4\043" +
    "\uffb4\045\uffb4\052\uffb4\053\203\001\002\000\030\004\201" +
    "\010\uffb9\011\uffb9\014\uffb9\025\uffb9\033\uffb9\035\uffb9\037" +
    "\176\040\200\043\uffb9\045\uffb9\001\002\000\036\004\uffb6" +
    "\005\uffb6\010\uffb6\011\uffb6\014\uffb6\025\uffb6\033\uffb6\035" +
    "\uffb6\037\uffb6\040\uffb6\043\uffb6\045\uffb6\052\uffb6\053\203" +
    "\001\002\000\004\045\213\001\002\000\006\034\uffc3\041" +
    "\141\001\002\000\006\034\uffc1\041\215\001\002\000\004" +
    "\051\142\001\002\000\006\034\uffc0\041\uffc0\001\002\000" +
    "\004\011\220\001\002\000\020\012\120\015\067\020\125" +
    "\021\070\026\122\032\073\051\126\001\002\000\010\010" +
    "\uffc9\014\222\025\uffc9\001\002\000\020\012\120\015\067" +
    "\020\125\021\070\026\122\032\073\051\126\001\002\000" +
    "\010\010\uffc8\014\uffc8\025\uffc8\001\002\000\022\024\156" +
    "\037\151\040\144\042\157\051\154\054\147\055\054\056" +
    "\053\001\002\000\010\010\uffce\014\uffce\025\uffce\001\002" +
    "\000\004\034\227\001\002\000\010\051\050\055\054\056" +
    "\053\001\002\000\006\007\233\013\231\001\002\000\010" +
    "\051\uffc5\055\uffc5\056\uffc5\001\002\000\010\051\050\055" +
    "\054\056\053\001\002\000\010\051\uffc6\055\uffc6\056\uffc6" +
    "\001\002\000\004\033\235\001\002\000\020\012\120\015" +
    "\067\020\125\021\070\026\122\032\073\051\126\001\002" +
    "\000\010\010\uffca\014\uffca\025\uffca\001\002\000\004\033" +
    "\240\001\002\000\020\012\120\015\067\020\125\021\070" +
    "\026\122\032\073\051\126\001\002\000\010\010\uffcb\014" +
    "\uffcb\025\uffcb\001\002\000\006\025\243\042\077\001\002" +
    "\000\012\006\uffd9\015\uffd9\021\uffd9\032\uffd9\001\002\000" +
    "\004\025\245\001\002\000\014\006\uffda\015\uffda\021\uffda" +
    "\027\246\032\uffda\001\002\000\010\010\uffdd\014\uffdd\025" +
    "\uffdd\001\002\000\010\015\uffe0\021\uffe0\032\uffe0\001\002" +
    "\000\010\015\067\021\070\032\073\001\002\000\010\010" +
    "\uffdf\014\uffdf\025\uffdf\001\002\000\014\003\012\015\uffed" +
    "\021\uffed\032\uffed\051\011\001\002\000\016\006\ufff6\015" +
    "\ufff6\021\ufff6\022\ufff6\032\ufff6\051\ufff6\001\002\000\016" +
    "\006\ufffa\015\ufffa\021\ufffa\022\ufffa\032\ufffa\051\255\001" +
    "\002\000\004\005\256\001\002\000\016\037\151\040\144" +
    "\051\050\054\260\055\054\056\053\001\002\000\010\051" +
    "\050\055\054\056\053\001\002\000\020\006\ufff2\015\ufff2" +
    "\021\ufff2\022\ufff2\025\ufff2\032\ufff2\051\ufff2\001\002\000" +
    "\020\006\ufff7\015\ufff7\021\ufff7\022\ufff7\025\263\032\ufff7" +
    "\051\ufff7\001\002\000\020\006\ufff3\015\ufff3\021\ufff3\022" +
    "\ufff3\025\ufff3\032\ufff3\051\ufff3\001\002\000\016\006\ufff8" +
    "\015\ufff8\021\ufff8\022\ufff8\032\ufff8\051\ufff8\001\002\000" +
    "\020\006\ufff4\015\ufff4\021\ufff4\022\ufff4\025\ufff4\032\ufff4" +
    "\051\ufff4\001\002\000\010\035\ufffc\036\ufffc\043\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\017\001\001\000\004\005\253\001\001\000\004\007" +
    "\020\001\001\000\004\011\063\001\001\000\004\010\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\033\014\035\015\027\041\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\044\014\035\015\027\041" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\050\042\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\050\042\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\061\014\035" +
    "\015\027\041\031\001\001\000\002\001\001\000\004\012" +
    "\251\001\001\000\004\016\064\001\001\000\010\017\070" +
    "\022\065\023\071\001\001\000\004\011\246\001\001\000" +
    "\002\001\001\000\022\017\127\022\065\023\123\024\130" +
    "\025\126\026\131\031\122\033\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\100\021\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\104\001" +
    "\001\000\002\001\001\000\012\013\106\014\035\015\027" +
    "\041\031\001\001\000\002\001\001\000\012\013\110\014" +
    "\035\015\027\041\031\001\001\000\002\001\001\000\006" +
    "\014\112\015\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\147\032\236\035\152\036\145\037\144\040" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\027\147\032\216\035" +
    "\152\036\145\037\144\040\154\001\001\000\004\043\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\017\127\022\065\023\123" +
    "\025\133\031\122\033\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\027\147\032\211" +
    "\035\152\036\145\037\144\040\154\001\001\000\020\027" +
    "\147\032\151\034\157\035\152\036\145\037\144\040\154" +
    "\001\001\000\004\031\142\001\001\000\004\043\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\147" +
    "\036\210\040\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\147\040\165\001\001\000\016\027\147\032\163" +
    "\035\152\036\145\037\144\040\154\001\001\000\002\001" +
    "\001\000\016\027\147\032\162\035\152\036\145\037\144" +
    "\040\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\027\147\032\172\035\152\036\145\037\144\040\154\001" +
    "\001\000\020\027\147\032\151\034\170\035\152\036\145" +
    "\037\144\040\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\027\147" +
    "\035\207\036\145\037\144\040\154\001\001\000\010\027" +
    "\147\036\206\040\154\001\001\000\014\027\147\035\205" +
    "\036\145\037\144\040\154\001\001\000\010\027\147\036" +
    "\204\040\154\001\001\000\010\027\147\036\201\040\154" +
    "\001\001\000\002\001\001\000\006\027\147\040\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\213\001\001\000\002\001\001" +
    "\000\004\031\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\127\022\065\023\123\025\220\031\122" +
    "\033\120\001\001\000\002\001\001\000\016\017\127\022" +
    "\065\023\123\025\222\031\122\033\120\001\001\000\002" +
    "\001\001\000\016\027\147\032\224\035\152\036\145\037" +
    "\144\040\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\050\042\227\001\001\000\004\030\231\001" +
    "\001\000\002\001\001\000\006\027\050\042\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\017\127\022" +
    "\065\023\123\025\235\031\122\033\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\127\022\065\023" +
    "\123\025\240\031\122\033\120\001\001\000\002\001\001" +
    "\000\004\020\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\247" +
    "\001\001\000\010\017\070\022\065\023\250\001\001\000" +
    "\002\001\001\000\004\003\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\260\027" +
    "\050\037\256\042\261\001\001\000\006\027\050\042\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PishCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PishCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PishCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }

  public void syntax_error(Symbol s){
  	JavaSymbol tok = null;
  	
  	if( s instanceof JavaSymbol ){
		tok = (JavaSymbol) s;
	}else{
		tok = (JavaSymbol) s.value;
	}
	
	System.out.println("Line " + tok.getLine()+": Syntax Error; Unexpected: \"" + tok.toString()+"\"" );
  }
	
  public void report_fatal_error(String message, Object info) {
  	System.out.println("Fatal Error");
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PishCup$actions {




  private final PishCup parser;

  /** Constructor */
  CUP$PishCup$actions(PishCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PishCup$do_action(
    int                        CUP$PishCup$act_num,
    java_cup.runtime.lr_parser CUP$PishCup$parser,
    java.util.Stack            CUP$PishCup$stack,
    int                        CUP$PishCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PishCup$result;

      /* select the action based on the action number */
      switch (CUP$PishCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // numeralid ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ConstantId(id);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("numeralid",32, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // numeralid ::= num 
            {
              Variable RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		NumberExpr n = (NumberExpr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = n;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("numeralid",32, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // array ::= ARRAY LSPAREN numeralid DOT DOT numeralid RSPAREN OF type 
            {
              ArrayType RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ArrayType(n1, n2,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("array",31, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-8)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sign ::= MINUS 
            {
              Operator RESULT =null;
			RESULT = Operator.MINUS; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("sign",29, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sign ::= PLUS 
            {
              Operator RESULT =null;
			RESULT = Operator.PLUS;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("sign",29, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // num ::= DECIMAL 
            {
              NumberExpr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol d = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new RealExpr(d);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("num",21, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // num ::= INT 
            {
              NumberExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new IntegerExpr(i);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("num",21, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= NOT factor 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new UnaryOpExpr(f,Operator.NOT);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = e;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol s = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new StringExpr(s);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= num 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		NumberExpr n = (NumberExpr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = n;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= ID LPAREN expression_list RPAREN 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new FunctionCallExpr(id,e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= ID LSPAREN expression RSPAREN 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new IndexedExpr(new IDNode(id),e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IDNode(id);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term ::= term MULOP factor 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol o = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(t,o,f);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term ::= factor 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = f;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_expression ::= simple_expression MINUS term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e,Operator.MINUS,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_expression ::= simple_expression PLUS term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e,Operator.PLUS,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_expression ::= simple_expression OR term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e,Operator.LOR,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_expression ::= sign term 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Operator s = (Operator)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new UnaryOpExpr(t,s);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // simple_expression ::= term 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = t;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= simple_expression EQUAL simple_expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e1,Operator.EQ,e2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= simple_expression RELOP simple_expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol r = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e1,r,e2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= simple_expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = e;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_list ::= expression_list COMMA expression 
            {
              ExprList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ExprList(e,l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_list ::= expression 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ExprList(e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedure_statement ::= ID LPAREN expression_list RPAREN 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new FunctionCallExpr(id,e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("procedure_statement",25, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // procedure_statement ::= ID 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new FuncVar(id);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("procedure_statement",25, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variableprime ::= DOT variable 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = v1;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variableprime",33, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variableprime ::= variableprime DOT variable 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new RecordExpr(v1,v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variableprime",33, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= ID LSPAREN expression RSPAREN variableprime 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 	RESULT = new RecordExpr(new IndexedExpr(new IDNode(id),e),v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable ::= ID variableprime 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol v1 = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		  RESULT = new RecordExpr(new IDNode(v1),v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable ::= ID LSPAREN expression RSPAREN 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new IndexedExpr(new IDNode(id),e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IDNode(id);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forprime ::= TO 
            {
              Boolean RESULT =null;
			RESULT = new Boolean(false); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("forprime",22, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // forprime ::= DOWNTO 
            {
              Boolean RESULT =null;
			RESULT = new Boolean(true); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("forprime",22, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= subprogram_declaration 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		SubProgramDecleration s = (SubProgramDecleration)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = s;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= IF expression THEN statement ELSE statement 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IfStmt(e,new StmtList(s1),new StmtList(s2));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= IF expression THEN statement 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IfStmt(e,new StmtList(s));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= FOR ID ASSIGN numeralid forprime numeralid DO statement 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		Variable id1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable id2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ForStmt(new IDNode(id), id1, id2, new StmtList(stmt),f);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-7)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= WHILE expression DO statement 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new WhileStmt(e,new StmtList(s));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= compound_statement 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		StmtList c = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new CompoundStmt(c);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= procedure_statement 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt p = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = p;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= variable ASSIGN expression 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable id = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new AssignStmt(id,expr);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_list ::= statement_list SEMICOLON statement 
            {
              StmtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		StmtList l = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new StmtList(s,l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement_list",20, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement_list ::= statement 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new StmtList(s);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement_list",20, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optional_statements ::= 
            {
              StmtList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("optional_statements",18, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // optional_statements ::= statement_list 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  s;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("optional_statements",18, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compound_statement ::= BEGIN optional_statements END 
            {
              StmtList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		StmtList o = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT =  o;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("compound_statement",17, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter_list ::= parameter_list SEMICOLON identifier_list COLON type 
            {
              SimpleDeclerationList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		SimpleDeclerationList l = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		VariableList i = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new SimpleDeclerationList(new SimpleDecleration(i,t),l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter_list ::= identifier_list COLON type 
            {
              SimpleDeclerationList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		VariableList i = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new SimpleDeclerationList(new SimpleDecleration(i,t));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arguments ::= 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arguments ::= LPAREN RPAREN 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arguments ::= LPAREN parameter_list RPAREN 
            {
              SimpleDeclerationList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SimpleDeclerationList p = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT=p; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // subprogram_head ::= PROCEDURE ID SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // subprogram_head ::= PROCEDURE ID arguments SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i),a); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subprogram_head ::= FUNCTION ID SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // subprogram_head ::= FUNCTION ID arguments COLON standard_type_with_id SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Variable s = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i),a,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // subprogram_declaration ::= PROCEDURE ID arguments SEMICOLON FORWARD 
            {
              SubProgramDecleration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
				RESULT =new SubProgramDecleration(new SubProgramHeader(new FuncVar(i),a));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",13, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subprogram_declaration ::= FUNCTION ID arguments COLON standard_type_with_id SEMICOLON FORWARD 
            {
              SubProgramDecleration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable s = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
				RESULT =new SubProgramDecleration(new SubProgramHeader(new FuncVar(i),a,s));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",13, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subprogram_declaration ::= subprogram_head declarations subprogram_declarations compound_statement 
            {
              SubProgramDecleration RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		SubProgramHeader h = (SubProgramHeader)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SubProgramDeclerationList sd = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
				RESULT =new SubProgramDecleration(h,d,sd,s);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",13, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subprogram_declarations ::= 
            {
              SubProgramDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",12, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subprogram_declarations ::= subprogram_declarations subprogram_declaration SEMICOLON 
            {
              SubProgramDeclerationList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SubProgramDeclerationList l = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SubProgramDecleration s = (SubProgramDecleration)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new SubProgramDeclerationList(s,l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",12, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // standard_type ::= CHAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol c = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new CharType(); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type",11, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // standard_type ::= REAL 
            {
              Type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol r = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new RealType(); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type",11, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // standard_type ::= INTEGER 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new IntType(); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type",11, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // standard_type_with_id ::= standard_type 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT=s;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type_with_id",10, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // standard_type_with_id ::= ID 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new IDNode(i); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type_with_id",10, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= RECORD declaration_list END 
            {
              Variable RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SimpleDeclerationList r = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		 RESULT = new RecordType(new RecordList(r)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= array 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		ArrayType a = (ArrayType)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = a; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= standard_type_with_id 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable i = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = i; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration_list ::= 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declaration_list",8, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration_list ::= declaration_list identifier_list COLON type SEMICOLON 
            {
              SimpleDeclerationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		VariableList l = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		 RESULT = new SimpleDeclerationList(new SimpleDecleration(l,t),d);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declaration_list",8, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations ::= 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declarations",7, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations ::= VAR declaration_list 
            {
              SimpleDeclerationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = d; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declarations",7, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_def ::= 
            {
              TypeDefList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type_def",6, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_def ::= type_def ID EQUAL type SEMICOLON 
            {
              TypeDefList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		TypeDefList l = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new TypeDefList(new TypeDef(new IDNode(i),t),l); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type_def",6, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // types ::= 
            {
              TypeDefList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // types ::= TYPE type_def 
            {
              TypeDefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		TypeDefList t = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT=t; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constantprime ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol s = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new StringExpr(s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constantprime",4, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constantprime ::= numeralid 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable n = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = n; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constantprime",4, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constantprime ::= sign numeralid 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Operator s = (Operator)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable n = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new UnaryOpExpr(n,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constantprime",4, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= 
            {
              ConstantList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= error 
            {
              ConstantList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= constant ID EQUAL constantprime 
            {
              ConstantList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 System.out.println("ERROR RECOVERED at Line " + expr.getLineNumber() + ": Expected \";\"");
	   RESULT = new ConstantList(new Constant(new ConstantId(id),expr),c); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= constant ID EQUAL constantprime SEMICOLON 
            {
              ConstantList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		 RESULT = new ConstantList(new Constant(new ConstantId(id),expr),c); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants ::= 
            {
              ConstantList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constants",2, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants ::= CONST constant 
            {
              ConstantList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = c; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constants",2, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier_list ::= error 
            {
              VariableList RESULT =null;
		 RESULT = new VariableList(new IDNode("ERROR_PLACE_HOLDER"),null); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier_list ::= identifier_list COMMA ID 
            {
              VariableList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		VariableList l = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new VariableList(new IDNode(i),l); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifier_list ::= ID 
            {
              VariableList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new VariableList(new IDNode(i)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error 
            {
              Program RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM ID LPAREN identifier_list RPAREN SEMICOLON constants types declarations subprogram_declarations compound_statement 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-9)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		TypeDefList t = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SubProgramDeclerationList p = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 System.out.println("ERROR RECOVERED Expected \".\" to terminate program at end of program");
       RESULT = new Program(new IDNode(id),c,t,d,p,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM ID LPAREN identifier_list RPAREN SEMICOLON constants types declarations subprogram_declarations compound_statement DOT 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		TypeDefList t = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SubProgramDeclerationList p = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new Program(new IDNode(id),c,t,d,p,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-11)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		RESULT = start_val;
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PishCup$parser.done_parsing();
          return CUP$PishCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

