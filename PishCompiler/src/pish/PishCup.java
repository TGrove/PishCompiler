
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 20 04:19:36 EDT 2010
//----------------------------------------------------

package pish;

import java_cup.runtime.*;
import pish.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 20 04:19:36 EDT 2010
  */
public class PishCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PishCup() {super();}

  /** Constructor which sets the default scanner. */
  public PishCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PishCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\016\000\002\002" +
    "\015\000\002\002\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\003\000\002\004\004\000\002\004\002\000" +
    "\002\005\007\000\002\005\006\000\002\005\003\000\002" +
    "\005\002\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\007\004\000\002\007\002\000\002\010\007" +
    "\000\002\010\002\000\002\011\004\000\002\011\002\000" +
    "\002\012\007\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\014\003\000\002\014" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\005\000\002\016\002\000\002\017\006\000" +
    "\002\017\011\000\002\017\007\000\002\022\010\000\002" +
    "\022\005\000\002\022\006\000\002\022\005\000\002\020" +
    "\005\000\002\020\004\000\002\020\002\000\002\021\005" +
    "\000\002\021\007\000\002\023\005\000\002\023\007\000" +
    "\002\024\003\000\002\024\002\000\002\026\003\000\002" +
    "\026\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\006\000\002\025\012\000\002\025\006" +
    "\000\002\025\010\000\002\025\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\006\000\002" +
    "\031\004\000\002\031\007\000\002\043\005\000\002\043" +
    "\004\000\002\033\003\000\002\033\006\000\002\034\003" +
    "\000\002\034\005\000\002\032\003\000\002\032\005\000" +
    "\002\032\005\000\002\035\003\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\036\003\000\002\036" +
    "\005\000\002\036\004\000\002\040\003\000\002\040\006" +
    "\000\002\040\006\000\002\040\004\000\002\040\007\000" +
    "\002\040\003\000\002\040\003\000\002\040\005\000\002" +
    "\040\004\000\002\027\003\000\002\027\003\000\002\037" +
    "\003\000\002\037\003\000\002\041\013\000\002\042\003" +
    "\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\006\003\005\016\006\001\002\000\004\002" +
    "\275\001\002\000\004\002\ufffe\001\002\000\004\051\007" +
    "\001\002\000\004\042\010\001\002\000\006\003\012\051" +
    "\011\001\002\000\010\035\ufffd\036\ufffd\043\ufffd\001\002" +
    "\000\010\035\ufffb\036\ufffb\043\ufffb\001\002\000\006\035" +
    "\014\043\015\001\002\000\004\051\274\001\002\000\004" +
    "\025\016\001\002\000\016\006\ufff9\015\ufff9\021\ufff9\022" +
    "\ufff9\031\017\032\ufff9\001\002\000\020\003\262\006\ufff5" +
    "\015\ufff5\021\ufff5\022\ufff5\032\ufff5\051\ufff5\001\002\000" +
    "\014\006\ufff0\015\ufff0\021\ufff0\022\022\032\ufff0\001\002" +
    "\000\012\006\063\015\uffec\021\uffec\032\uffec\001\002\000" +
    "\014\006\uffee\015\uffee\021\uffee\032\uffee\051\uffee\001\002" +
    "\000\014\006\ufff1\015\ufff1\021\ufff1\032\ufff1\051\024\001" +
    "\002\000\004\005\025\001\002\000\016\023\031\030\027" +
    "\046\037\047\026\050\035\051\033\001\002\000\006\025" +
    "\uffe4\043\uffe4\001\002\000\004\044\047\001\002\000\006" +
    "\025\uffe5\043\uffe5\001\002\000\010\003\uffea\010\uffea\051" +
    "\uffea\001\002\000\006\025\uffe8\043\uffe8\001\002\000\006" +
    "\025\uffe6\043\uffe6\001\002\000\004\025\040\001\002\000" +
    "\006\025\uffe3\043\uffe3\001\002\000\006\025\uffe9\043\uffe9" +
    "\001\002\000\006\025\uffe2\043\uffe2\001\002\000\014\006" +
    "\uffef\015\uffef\021\uffef\032\uffef\051\uffef\001\002\000\010" +
    "\003\012\010\043\051\011\001\002\000\006\035\014\036" +
    "\044\001\002\000\006\025\uffe7\043\uffe7\001\002\000\016" +
    "\023\031\030\027\046\037\047\026\050\035\051\033\001" +
    "\002\000\004\025\046\001\002\000\024\003\uffeb\010\uffeb" +
    "\012\uffeb\015\uffeb\020\uffeb\021\uffeb\026\uffeb\032\uffeb\051" +
    "\uffeb\001\002\000\010\051\050\055\054\056\053\001\002" +
    "\000\032\006\uffa0\007\uffa0\013\uffa0\015\uffa0\021\uffa0\022" +
    "\uffa0\025\uffa0\032\uffa0\033\uffa0\041\uffa0\045\uffa0\051\uffa0" +
    "\001\002\000\032\006\uffa1\007\uffa1\013\uffa1\015\uffa1\021" +
    "\uffa1\022\uffa1\025\uffa1\032\uffa1\033\uffa1\041\uffa1\045\uffa1" +
    "\051\uffa1\001\002\000\004\041\055\001\002\000\060\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\013\uffa5" +
    "\014\uffa5\015\uffa5\021\uffa5\022\uffa5\025\uffa5\032\uffa5\033" +
    "\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\043\uffa5\045\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\001\002\000\060\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\021\uffa6\022\uffa6\025\uffa6\032\uffa6\033\uffa6\035" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\043\uffa6\045\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\001\002\000\004\041\056\001\002\000" +
    "\010\051\050\055\054\056\053\001\002\000\004\045\060" +
    "\001\002\000\004\017\061\001\002\000\016\023\031\030" +
    "\027\046\037\047\026\050\035\051\033\001\002\000\006" +
    "\025\uffa2\043\uffa2\001\002\000\014\003\uffea\015\uffea\021" +
    "\uffea\032\uffea\051\uffea\001\002\000\010\015\uffe0\021\uffe0" +
    "\032\uffe0\001\002\000\010\015\067\021\070\032\073\001" +
    "\002\000\012\006\063\015\uffec\021\uffec\032\uffec\001\002" +
    "\000\004\051\251\001\002\000\024\006\124\010\uffd0\012" +
    "\120\015\067\020\126\021\070\026\121\032\073\051\127" +
    "\001\002\000\004\025\117\001\002\000\006\002\uffff\041" +
    "\116\001\002\000\004\051\074\001\002\000\010\025\075" +
    "\036\uffd6\042\077\001\002\000\012\006\uffdb\015\uffdb\021" +
    "\uffdb\032\uffdb\001\002\000\004\036\112\001\002\000\010" +
    "\003\012\043\100\051\011\001\002\000\006\025\uffd7\036" +
    "\uffd7\001\002\000\006\035\014\036\110\001\002\000\006" +
    "\025\104\043\103\001\002\000\006\025\uffd8\036\uffd8\001" +
    "\002\000\006\003\012\051\011\001\002\000\006\035\014" +
    "\036\106\001\002\000\016\023\031\030\027\046\037\047" +
    "\026\050\035\051\033\001\002\000\006\025\uffd4\043\uffd4" +
    "\001\002\000\016\023\031\030\027\046\037\047\026\050" +
    "\035\051\033\001\002\000\006\025\uffd5\043\uffd5\001\002" +
    "\000\012\046\037\047\026\050\035\051\033\001\002\000" +
    "\004\025\114\001\002\000\014\006\uffdc\015\uffdc\021\uffdc" +
    "\027\115\032\uffdc\001\002\000\010\010\uffde\014\uffde\025" +
    "\uffde\001\002\000\004\002\000\001\002\000\010\015\uffe1" +
    "\021\uffe1\032\uffe1\001\002\000\022\024\157\037\151\040" +
    "\145\042\160\051\155\054\150\055\054\056\053\001\002" +
    "\000\004\051\235\001\002\000\010\010\uffcc\014\uffcc\025" +
    "\uffcc\001\002\000\004\034\233\001\002\000\024\003\uffea" +
    "\010\uffea\012\uffea\015\uffea\020\uffea\021\uffea\026\uffea\032" +
    "\uffea\051\uffea\001\002\000\010\010\uffcb\014\uffcb\025\uffcb" +
    "\001\002\000\022\024\157\037\151\040\145\042\160\051" +
    "\155\054\150\055\054\056\053\001\002\000\020\010\uffbd" +
    "\014\uffbd\025\uffbd\034\uffc3\041\142\042\141\044\140\001" +
    "\002\000\006\010\uffcf\025\uffcf\001\002\000\010\010\uffc6" +
    "\014\uffc6\025\uffc6\001\002\000\004\010\136\001\002\000" +
    "\006\010\uffd1\025\134\001\002\000\020\012\120\015\067" +
    "\020\126\021\070\026\121\032\073\051\127\001\002\000" +
    "\006\010\uffce\025\uffce\001\002\000\014\002\uffd3\010\uffd3" +
    "\014\uffd3\025\uffd3\041\uffd3\001\002\000\042\004\uffc1\005" +
    "\uffc1\010\uffc1\011\uffc1\014\uffc1\025\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\037\uffc1\040\uffc1\041\200\043\uffc1\045\uffc1\052" +
    "\uffc1\053\uffc1\001\002\000\022\024\157\037\151\040\145" +
    "\042\160\051\155\054\150\055\054\056\053\001\002\000" +
    "\022\024\157\037\151\040\145\042\160\051\155\054\150" +
    "\055\054\056\053\001\002\000\004\051\143\001\002\000" +
    "\044\004\uffc3\005\uffc3\010\uffc3\011\uffc3\014\uffc3\025\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\041\142\043" +
    "\uffc3\044\140\045\uffc3\052\uffc3\053\uffc3\001\002\000\042" +
    "\004\uffbe\005\uffbe\010\uffbe\011\uffbe\014\uffbe\025\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe" +
    "\045\uffbe\052\uffbe\053\uffbe\001\002\000\016\024\uffa3\042" +
    "\uffa3\051\uffa3\054\uffa3\055\uffa3\056\uffa3\001\002\000\016" +
    "\024\157\042\160\051\155\054\150\055\054\056\053\001" +
    "\002\000\036\004\uffb6\005\uffb6\010\uffb6\011\uffb6\014\uffb6" +
    "\025\uffb6\033\uffb6\035\uffb6\037\uffb6\040\uffb6\043\uffb6\045" +
    "\uffb6\052\uffb6\053\210\001\002\000\036\004\uffa9\005\uffa9" +
    "\010\uffa9\011\uffa9\014\uffa9\025\uffa9\033\uffa9\035\uffa9\037" +
    "\uffa9\040\uffa9\043\uffa9\045\uffa9\052\uffa9\053\uffa9\001\002" +
    "\000\016\024\uffa4\042\uffa4\051\uffa4\054\uffa4\055\uffa4\056" +
    "\uffa4\001\002\000\036\004\uffaa\005\uffaa\010\uffaa\011\uffaa" +
    "\014\uffaa\025\uffaa\033\uffaa\035\uffaa\037\uffaa\040\uffaa\043" +
    "\uffaa\045\uffaa\052\uffaa\053\uffaa\001\002\000\006\035\uffbb" +
    "\043\uffbb\001\002\000\034\004\206\005\204\010\uffb9\011" +
    "\uffb9\014\uffb9\025\uffb9\033\uffb9\035\uffb9\037\203\040\205" +
    "\043\uffb9\045\uffb9\052\202\001\002\000\044\004\uffaf\005" +
    "\uffaf\010\uffaf\011\uffaf\014\uffaf\025\uffaf\033\uffaf\035\uffaf" +
    "\037\uffaf\040\uffaf\041\142\042\172\043\uffaf\044\171\045" +
    "\uffaf\052\uffaf\053\uffaf\001\002\000\036\004\uffb2\005\uffb2" +
    "\010\uffb2\011\uffb2\014\uffb2\025\uffb2\033\uffb2\035\uffb2\037" +
    "\uffb2\040\uffb2\043\uffb2\045\uffb2\052\uffb2\053\uffb2\001\002" +
    "\000\016\024\157\042\160\051\155\054\150\055\054\056" +
    "\053\001\002\000\022\024\157\037\151\040\145\042\160" +
    "\051\155\054\150\055\054\056\053\001\002\000\006\035" +
    "\162\043\163\001\002\000\022\024\157\037\151\040\145" +
    "\042\160\051\155\054\150\055\054\056\053\001\002\000" +
    "\010\010\uffbc\014\uffbc\025\uffbc\001\002\000\006\035\uffba" +
    "\043\uffba\001\002\000\004\043\166\001\002\000\036\004" +
    "\uffa8\005\uffa8\010\uffa8\011\uffa8\014\uffa8\025\uffa8\033\uffa8" +
    "\035\uffa8\037\uffa8\040\uffa8\043\uffa8\045\uffa8\052\uffa8\053" +
    "\uffa8\001\002\000\036\004\uffa7\005\uffa7\010\uffa7\011\uffa7" +
    "\014\uffa7\025\uffa7\033\uffa7\035\uffa7\037\uffa7\040\uffa7\043" +
    "\uffa7\045\uffa7\052\uffa7\053\uffa7\001\002\000\040\004\uffac" +
    "\005\uffac\010\uffac\011\uffac\014\uffac\025\uffac\033\uffac\035" +
    "\uffac\037\uffac\040\uffac\041\200\043\uffac\045\uffac\052\uffac" +
    "\053\uffac\001\002\000\022\024\157\037\151\040\145\042" +
    "\160\051\155\054\150\055\054\056\053\001\002\000\022" +
    "\024\157\037\151\040\145\042\160\051\155\054\150\055" +
    "\054\056\053\001\002\000\006\035\162\043\174\001\002" +
    "\000\036\004\uffad\005\uffad\010\uffad\011\uffad\014\uffad\025" +
    "\uffad\033\uffad\035\uffad\037\uffad\040\uffad\043\uffad\045\uffad" +
    "\052\uffad\053\uffad\001\002\000\004\045\176\001\002\000" +
    "\040\004\uffae\005\uffae\010\uffae\011\uffae\014\uffae\025\uffae" +
    "\033\uffae\035\uffae\037\uffae\040\uffae\041\142\043\uffae\045" +
    "\uffae\052\uffae\053\uffae\001\002\000\040\004\uffab\005\uffab" +
    "\010\uffab\011\uffab\014\uffab\025\uffab\033\uffab\035\uffab\037" +
    "\uffab\040\uffab\041\200\043\uffab\045\uffab\052\uffab\053\uffab" +
    "\001\002\000\004\051\143\001\002\000\042\004\uffbf\005" +
    "\uffbf\010\uffbf\011\uffbf\014\uffbf\025\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\045\uffbf\052" +
    "\uffbf\053\uffbf\001\002\000\022\024\157\037\151\040\145" +
    "\042\160\051\155\054\150\055\054\056\053\001\002\000" +
    "\022\024\157\037\151\040\145\042\160\051\155\054\150" +
    "\055\054\056\053\001\002\000\022\024\157\037\151\040" +
    "\145\042\160\051\155\054\150\055\054\056\053\001\002" +
    "\000\022\024\157\037\151\040\145\042\160\051\155\054" +
    "\150\055\054\056\053\001\002\000\022\024\157\037\151" +
    "\040\145\042\160\051\155\054\150\055\054\056\053\001" +
    "\002\000\036\004\uffb5\005\uffb5\010\uffb5\011\uffb5\014\uffb5" +
    "\025\uffb5\033\uffb5\035\uffb5\037\uffb5\040\uffb5\043\uffb5\045" +
    "\uffb5\052\uffb5\053\210\001\002\000\016\024\157\042\160" +
    "\051\155\054\150\055\054\056\053\001\002\000\036\004" +
    "\uffb1\005\uffb1\010\uffb1\011\uffb1\014\uffb1\025\uffb1\033\uffb1" +
    "\035\uffb1\037\uffb1\040\uffb1\043\uffb1\045\uffb1\052\uffb1\053" +
    "\uffb1\001\002\000\036\004\uffb3\005\uffb3\010\uffb3\011\uffb3" +
    "\014\uffb3\025\uffb3\033\uffb3\035\uffb3\037\uffb3\040\uffb3\043" +
    "\uffb3\045\uffb3\052\uffb3\053\210\001\002\000\030\004\206" +
    "\010\uffb7\011\uffb7\014\uffb7\025\uffb7\033\uffb7\035\uffb7\037" +
    "\203\040\205\043\uffb7\045\uffb7\001\002\000\036\004\uffb4" +
    "\005\uffb4\010\uffb4\011\uffb4\014\uffb4\025\uffb4\033\uffb4\035" +
    "\uffb4\037\uffb4\040\uffb4\043\uffb4\045\uffb4\052\uffb4\053\210" +
    "\001\002\000\030\004\206\010\uffb8\011\uffb8\014\uffb8\025" +
    "\uffb8\033\uffb8\035\uffb8\037\203\040\205\043\uffb8\045\uffb8" +
    "\001\002\000\036\004\uffb0\005\uffb0\010\uffb0\011\uffb0\014" +
    "\uffb0\025\uffb0\033\uffb0\035\uffb0\037\uffb0\040\uffb0\043\uffb0" +
    "\045\uffb0\052\uffb0\053\uffb0\001\002\000\004\045\220\001" +
    "\002\000\042\004\uffc2\005\uffc2\010\uffc2\011\uffc2\014\uffc2" +
    "\025\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2\041" +
    "\142\043\uffc2\045\uffc2\052\uffc2\053\uffc2\001\002\000\042" +
    "\004\uffc0\005\uffc0\010\uffc0\011\uffc0\014\uffc0\025\uffc0\033" +
    "\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\200\043\uffc0" +
    "\045\uffc0\052\uffc0\053\uffc0\001\002\000\004\011\223\001" +
    "\002\000\020\012\120\015\067\020\126\021\070\026\121" +
    "\032\073\051\127\001\002\000\010\010\uffc8\014\225\025" +
    "\uffc8\001\002\000\020\012\120\015\067\020\126\021\070" +
    "\026\121\032\073\051\127\001\002\000\010\010\uffc7\014" +
    "\uffc7\025\uffc7\001\002\000\024\003\012\010\uffd0\012\120" +
    "\015\067\020\126\021\070\026\121\032\073\051\230\001" +
    "\002\000\022\010\uffbd\025\uffbd\034\uffc3\035\ufffd\036\ufffd" +
    "\041\142\042\141\044\140\001\002\000\004\010\232\001" +
    "\002\000\014\002\uffd2\010\uffd2\014\uffd2\025\uffd2\041\uffd2" +
    "\001\002\000\022\024\157\037\151\040\145\042\160\051" +
    "\155\054\150\055\054\056\053\001\002\000\010\010\uffcd" +
    "\014\uffcd\025\uffcd\001\002\000\004\034\236\001\002\000" +
    "\010\051\050\055\054\056\053\001\002\000\006\007\242" +
    "\013\240\001\002\000\010\051\uffc4\055\uffc4\056\uffc4\001" +
    "\002\000\010\051\050\055\054\056\053\001\002\000\010" +
    "\051\uffc5\055\uffc5\056\uffc5\001\002\000\004\033\244\001" +
    "\002\000\020\012\120\015\067\020\126\021\070\026\121" +
    "\032\073\051\127\001\002\000\010\010\uffc9\014\uffc9\025" +
    "\uffc9\001\002\000\004\033\247\001\002\000\020\012\120" +
    "\015\067\020\126\021\070\026\121\032\073\051\127\001" +
    "\002\000\010\010\uffca\014\uffca\025\uffca\001\002\000\006" +
    "\025\252\042\077\001\002\000\012\006\uffd9\015\uffd9\021" +
    "\uffd9\032\uffd9\001\002\000\004\025\254\001\002\000\014" +
    "\006\uffda\015\uffda\021\uffda\027\255\032\uffda\001\002\000" +
    "\010\010\uffdd\014\uffdd\025\uffdd\001\002\000\010\015\uffe0" +
    "\021\uffe0\032\uffe0\001\002\000\010\015\067\021\070\032" +
    "\073\001\002\000\010\010\uffdf\014\uffdf\025\uffdf\001\002" +
    "\000\014\003\012\015\uffed\021\uffed\032\uffed\051\011\001" +
    "\002\000\016\006\ufff6\015\ufff6\021\ufff6\022\ufff6\032\ufff6" +
    "\051\ufff6\001\002\000\016\006\ufffa\015\ufffa\021\ufffa\022" +
    "\ufffa\032\ufffa\051\264\001\002\000\004\005\265\001\002" +
    "\000\016\037\151\040\145\051\050\054\267\055\054\056" +
    "\053\001\002\000\010\051\050\055\054\056\053\001\002" +
    "\000\020\006\ufff2\015\ufff2\021\ufff2\022\ufff2\025\ufff2\032" +
    "\ufff2\051\ufff2\001\002\000\020\006\ufff7\015\ufff7\021\ufff7" +
    "\022\ufff7\025\272\032\ufff7\051\ufff7\001\002\000\020\006" +
    "\ufff3\015\ufff3\021\ufff3\022\ufff3\025\ufff3\032\ufff3\051\ufff3" +
    "\001\002\000\016\006\ufff8\015\ufff8\021\ufff8\022\ufff8\032" +
    "\ufff8\051\ufff8\001\002\000\020\006\ufff4\015\ufff4\021\ufff4" +
    "\022\ufff4\025\ufff4\032\ufff4\051\ufff4\001\002\000\010\035" +
    "\ufffc\036\ufffc\043\ufffc\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\017\001\001\000\004\005\262\001\001\000\004\007" +
    "\020\001\001\000\004\011\063\001\001\000\004\010\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\033\014\035\015\027\041\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\044\014\035\015\027\041" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\050\042\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\050\042\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\061\014\035" +
    "\015\027\041\031\001\001\000\002\001\001\000\004\012" +
    "\260\001\001\000\004\016\064\001\001\000\010\017\070" +
    "\022\065\023\071\001\001\000\004\011\255\001\001\000" +
    "\002\001\001\000\022\017\130\022\065\023\124\024\131" +
    "\025\127\026\132\031\122\033\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\100\021\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\104\001" +
    "\001\000\002\001\001\000\012\013\106\014\035\015\027" +
    "\041\031\001\001\000\002\001\001\000\012\013\110\014" +
    "\035\015\027\041\031\001\001\000\002\001\001\000\006" +
    "\014\112\015\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\151\032\245\035\153\036\146\037\145\040" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\226\001\001\000\002\001\001\000" +
    "\016\027\151\032\221\035\153\036\146\037\145\040\155" +
    "\001\001\000\004\043\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\130\022\065\023\124\025\134\031\122\033\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\151\032\216\035\153\036\146\037\145\040" +
    "\155\001\001\000\020\027\151\032\152\034\160\035\153" +
    "\036\146\037\145\040\155\001\001\000\004\031\143\001" +
    "\001\000\004\043\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\151\040\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\167\001" +
    "\001\000\002\001\001\000\006\027\151\040\166\001\001" +
    "\000\016\027\151\032\164\035\153\036\146\037\145\040" +
    "\155\001\001\000\002\001\001\000\016\027\151\032\163" +
    "\035\153\036\146\037\145\040\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\151\032" +
    "\174\035\153\036\146\037\145\040\155\001\001\000\020" +
    "\027\151\032\152\034\172\035\153\036\146\037\145\040" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\176\001\001\000\002\001\001\000" +
    "\004\031\200\001\001\000\002\001\001\000\014\027\151" +
    "\035\214\036\146\037\145\040\155\001\001\000\012\027" +
    "\151\036\213\037\145\040\155\001\001\000\014\027\151" +
    "\035\212\036\146\037\145\040\155\001\001\000\012\027" +
    "\151\036\211\037\145\040\155\001\001\000\012\027\151" +
    "\036\206\037\145\040\155\001\001\000\002\001\001\000" +
    "\006\027\151\040\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\130\022\065\023\124\025\223\031\122\033\121\001\001" +
    "\000\002\001\001\000\016\017\130\022\065\023\124\025" +
    "\225\031\122\033\121\001\001\000\002\001\001\000\024" +
    "\003\041\017\130\022\065\023\124\024\230\025\127\026" +
    "\132\031\122\033\121\001\001\000\004\043\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\151\032" +
    "\233\035\153\036\146\037\145\040\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\050\042\236\001" +
    "\001\000\004\030\240\001\001\000\002\001\001\000\006" +
    "\027\050\042\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\130\022\065\023\124\025\244\031\122" +
    "\033\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\130\022\065\023\124\025\247\031\122\033\121" +
    "\001\001\000\002\001\001\000\004\020\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\256\001\001\000\010\017\070\022" +
    "\065\023\257\001\001\000\002\001\001\000\004\003\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\267\027\050\037\265\042\270\001\001" +
    "\000\006\027\050\042\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PishCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PishCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PishCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message); 
   
    System.out.println(m);
  }

  public void syntax_error(Symbol s){
  	JavaSymbol tok = null;
  	
  	if( s instanceof JavaSymbol ){
		tok = (JavaSymbol) s;
	}else{
		tok = (JavaSymbol) s.value;
	}
	
	System.out.println("Line " + tok.getLine()+": Syntax Error; Unexpected: \"" + tok.toString()+"\"" );
  }
	
  public void report_fatal_error(String message, Object info) {
  	System.out.println("Fatal Error");
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PishCup$actions {




  private final PishCup parser;

  /** Constructor */
  CUP$PishCup$actions(PishCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PishCup$do_action(
    int                        CUP$PishCup$act_num,
    java_cup.runtime.lr_parser CUP$PishCup$parser,
    java.util.Stack            CUP$PishCup$stack,
    int                        CUP$PishCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PishCup$result;

      /* select the action based on the action number */
      switch (CUP$PishCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // numeralid ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ConstantId(id);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("numeralid",32, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // numeralid ::= num 
            {
              Variable RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		NumberExpr n = (NumberExpr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = n;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("numeralid",32, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // array ::= ARRAY LSPAREN numeralid DOT DOT numeralid RSPAREN OF type 
            {
              ArrayType RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).right;
		Variable n1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		Variable n2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ArrayType(n1, n2,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("array",31, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-8)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sign ::= MINUS 
            {
              Operator RESULT =null;
			RESULT = Operator.MINUS; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("sign",29, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sign ::= PLUS 
            {
              Operator RESULT =null;
			RESULT = Operator.PLUS;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("sign",29, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // num ::= DECIMAL 
            {
              NumberExpr RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol d = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new RealExpr(d);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("num",21, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // num ::= INT 
            {
              NumberExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new IntegerExpr(i);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("num",21, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= NOT factor 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new UnaryOpExpr(f,Operator.NOT);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= LPAREN expression RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = e;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol s = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new StringExpr(s);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= num 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		NumberExpr n = (NumberExpr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = n;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= ID LSPAREN expression RSPAREN variableprime 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 	RESULT = new RecordExpr(new IndexedExpr(new IDNode(id),e),v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= ID variableprime 
            {
              Expr RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol v1 = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		  RESULT = new RecordExpr(new IDNode(v1),v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= ID LPAREN expression_list RPAREN 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new FunctionCallExpr(id,e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // factor ::= ID LSPAREN expression RSPAREN 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new IndexedExpr(new IDNode(id),e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // factor ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IDNode(id);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("factor",30, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term ::= sign factor 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Operator s = (Operator)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		  RESULT = new UnaryOpExpr(f,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // term ::= term MULOP factor 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol o = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(t,o,f);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term ::= factor 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = f;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("term",28, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_expression ::= simple_expression MINUS term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e,Operator.MINUS,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // simple_expression ::= simple_expression PLUS term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e,Operator.PLUS,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // simple_expression ::= simple_expression OR term 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e,Operator.LOR,t);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // simple_expression ::= term 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = t;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("simple_expression",27, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= simple_expression EQUAL simple_expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e1,Operator.EQ,e2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= simple_expression RELOP simple_expression 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol r = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new BinaryOpExpr(e1,r,e2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= simple_expression 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = e;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression",24, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_list ::= expression_list COMMA expression 
            {
              ExprList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ExprList(e,l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_list ::= expression 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ExprList(e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("expression_list",26, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // procedure_statement ::= ID LPAREN expression_list RPAREN 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		ExprList e = (ExprList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new FunctionCallExpr(id,e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("procedure_statement",25, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedure_statement ::= ID 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new FuncVar(id);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("procedure_statement",25, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variableprime ::= DOT variable 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = v1;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variableprime",33, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variableprime ::= variableprime DOT variable 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable v1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new RecordExpr(v1,v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variableprime",33, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable ::= ID LSPAREN expression RSPAREN variableprime 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 	RESULT = new RecordExpr(new IndexedExpr(new IDNode(id),e),v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable ::= ID variableprime 
            {
              Variable RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol v1 = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable v2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		  RESULT = new RecordExpr(new IDNode(v1),v2);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable ::= ID LSPAREN expression RSPAREN 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new IndexedExpr(new IDNode(id),e);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable ::= ID 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IDNode(id);
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // forprime ::= TO 
            {
              Boolean RESULT =null;
			RESULT = new Boolean(false); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("forprime",22, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forprime ::= DOWNTO 
            {
              Boolean RESULT =null;
			RESULT = new Boolean(true); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("forprime",22, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= subprogram_declaration 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		SubProgramDecleration s = (SubProgramDecleration)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = s;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= IF expression THEN statement ELSE statement 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IfStmt(e,new StmtList(s1),new StmtList(s2));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= IF expression THEN statement 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new IfStmt(e,new StmtList(s));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= FOR ID ASSIGN numeralid forprime numeralid DO statement 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		Variable id1 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable id2 = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt stmt = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = new ForStmt(new IDNode(id), id1, id2, new StmtList(stmt),f);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-7)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= WHILE expression DO statement 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		    RESULT = new WhileStmt(e,new StmtList(s));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= compound_statement 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		    RESULT = c;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= procedure_statement 
            {
              Stmt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt p = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = p;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= variable ASSIGN expression 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable id = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			 RESULT = new AssignStmt(id,expr);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement_list ::= statement_list SEMICOLON statement 
            {
              StmtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		StmtList l = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new StmtList(s,l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement_list",20, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement_list ::= statement 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new StmtList(s);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("statement_list",20, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optional_statements ::= 
            {
              StmtList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("optional_statements",18, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optional_statements ::= statement_list 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		StmtList s = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  s;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("optional_statements",18, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // compound_statement ::= BEGIN VAR declaration_list optional_statements END 
            {
              CompoundStmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol v = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		StmtList o = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			System.out.println("Warning ( Line "+v.getLine()+"): this variable decleration section is not implemented and will be ignored.");	RESULT =  new CompoundStmt(o,d);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("compound_statement",17, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compound_statement ::= BEGIN optional_statements END 
            {
              CompoundStmt RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		StmtList o = (StmtList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT =  new CompoundStmt(o);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("compound_statement",17, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter_list ::= parameter_list SEMICOLON identifier_list COLON type 
            {
              SimpleDeclerationList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		SimpleDeclerationList l = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		VariableList i = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new SimpleDeclerationList(new SimpleDecleration(i,t),l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter_list ::= identifier_list COLON type 
            {
              SimpleDeclerationList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		VariableList i = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT =  new SimpleDeclerationList(new SimpleDecleration(i,t));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("parameter_list",15, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arguments ::= 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arguments ::= LPAREN RPAREN 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arguments ::= LPAREN parameter_list RPAREN 
            {
              SimpleDeclerationList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SimpleDeclerationList p = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT=p; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // subprogram_head ::= PROCEDURE ID SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // subprogram_head ::= PROCEDURE ID arguments SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i),a); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subprogram_head ::= FUNCTION ID SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // subprogram_head ::= FUNCTION ID arguments COLON standard_type_with_id SEMICOLON 
            {
              SubProgramHeader RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Variable s = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
				RESULT =new SubProgramHeader(new FuncVar(i),a,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_head",16, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // subprogram_declaration ::= PROCEDURE ID arguments SEMICOLON FORWARD 
            {
              SubProgramDecleration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
				RESULT =new SubProgramDecleration(new SubProgramHeader(new FuncVar(i),a));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",13, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // subprogram_declaration ::= FUNCTION ID arguments COLON standard_type_with_id SEMICOLON FORWARD 
            {
              SubProgramDecleration RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		SimpleDeclerationList a = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		Variable s = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
				RESULT =new SubProgramDecleration(new SubProgramHeader(new FuncVar(i),a,s));	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",13, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-6)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // subprogram_declaration ::= subprogram_head declarations subprogram_declarations compound_statement 
            {
              SubProgramDecleration RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		SubProgramHeader h = (SubProgramHeader)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sdleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SubProgramDeclerationList sd = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		CompoundStmt s = (CompoundStmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
				RESULT =new SubProgramDecleration(h,d,sd,s);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",13, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // subprogram_declarations ::= 
            {
              SubProgramDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",12, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // subprogram_declarations ::= subprogram_declarations subprogram_declaration SEMICOLON 
            {
              SubProgramDeclerationList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SubProgramDeclerationList l = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SubProgramDecleration s = (SubProgramDecleration)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new SubProgramDeclerationList(s,l);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("subprogram_declarations",12, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // standard_type ::= CHAR 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol c = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new CharType(); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type",11, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // standard_type ::= REAL 
            {
              Type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol r = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new RealType(); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type",11, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // standard_type ::= INTEGER 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new IntType(); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type",11, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // standard_type_with_id ::= standard_type 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Type s = (Type)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT=s;	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type_with_id",10, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // standard_type_with_id ::= ID 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new IDNode(i); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("standard_type_with_id",10, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= RECORD declaration_list END 
            {
              Variable RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SimpleDeclerationList r = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		 RESULT = new RecordType(new RecordList(r)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= array 
            {
              Variable RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		ArrayType a = (ArrayType)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = a; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= standard_type_with_id 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable i = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = i; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration_list ::= 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declaration_list",8, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaration_list ::= declaration_list identifier_list COLON type SEMICOLON 
            {
              SimpleDeclerationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		VariableList l = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		 RESULT = new SimpleDeclerationList(new SimpleDecleration(l,t),d);	
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declaration_list",8, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations ::= 
            {
              SimpleDeclerationList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declarations",7, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations ::= VAR declaration_list 
            {
              SimpleDeclerationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
			RESULT = d; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("declarations",7, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_def ::= 
            {
              TypeDefList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type_def",6, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_def ::= type_def ID EQUAL type SEMICOLON 
            {
              TypeDefList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		TypeDefList l = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new TypeDefList(new TypeDef(new IDNode(i),t),l); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("type_def",6, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // types ::= 
            {
              TypeDefList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // types ::= TYPE type_def 
            {
              TypeDefList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		TypeDefList t = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT=t; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("types",5, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constantprime ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol s = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new StringExpr(s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constantprime",4, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constantprime ::= numeralid 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable n = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = n; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constantprime",4, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constantprime ::= sign numeralid 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Operator s = (Operator)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Variable n = (Variable)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new UnaryOpExpr(n,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constantprime",4, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant ::= 
            {
              ConstantList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constant ::= error 
            {
              ConstantList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constant ::= constant ID EQUAL constantprime 
            {
              ConstantList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 System.out.println("ERROR RECOVERED at Line " + expr.getLineNumber() + ": Expected \";\"");
	   RESULT = new ConstantList(new Constant(new ConstantId(id),expr),c); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constant ::= constant ID EQUAL constantprime SEMICOLON 
            {
              ConstantList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		 RESULT = new ConstantList(new Constant(new ConstantId(id),expr),c); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constant",3, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constants ::= 
            {
              ConstantList RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constants",2, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constants ::= CONST constant 
            {
              ConstantList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = c; 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("constants",2, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier_list ::= error 
            {
              VariableList RESULT =null;
		 RESULT = new VariableList(new IDNode("ERROR_PLACE_HOLDER"),null); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier_list ::= identifier_list COMMA ID 
            {
              VariableList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		VariableList l = (VariableList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new VariableList(new IDNode(i),l); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifier_list ::= ID 
            {
              VariableList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		JavaSymbol i = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 RESULT = new VariableList(new IDNode(i)); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("identifier_list",1, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error 
            {
              Program RESULT =null;

              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= PROGRAM ID LPAREN identifier_list RPAREN SEMICOLON constants types declarations subprogram_declarations compound_statement 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-9)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		TypeDefList t = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		SubProgramDeclerationList p = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()).right;
		CompoundStmt s = (CompoundStmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.peek()).value;
		 System.out.println("ERROR RECOVERED Expected \".\" to terminate program at end of program");
       RESULT = new Program(new IDNode(id),c,t,d,p,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM ID LPAREN identifier_list RPAREN SEMICOLON constants types declarations subprogram_declarations compound_statement DOT 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)).right;
		JavaSymbol id = (JavaSymbol)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).right;
		ConstantList c = (ConstantList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).right;
		TypeDefList t = (TypeDefList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).right;
		SimpleDeclerationList d = (SimpleDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).right;
		SubProgramDeclerationList p = (SubProgramDeclerationList)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		CompoundStmt s = (CompoundStmt)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
			RESULT = new Program(new IDNode(id),c,t,d,p,s); 
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-11)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          return CUP$PishCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)).value;
		RESULT = start_val;
              CUP$PishCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PishCup$stack.elementAt(CUP$PishCup$top-1)), ((java_cup.runtime.Symbol)CUP$PishCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PishCup$parser.done_parsing();
          return CUP$PishCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

